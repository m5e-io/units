// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: units.proto

package units

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Symbol_PredefinedTypes int32

const (
	Symbol_UNSPECIFIED Symbol_PredefinedTypes = 0
	Symbol_ASCII       Symbol_PredefinedTypes = 1
	Symbol_Unicode     Symbol_PredefinedTypes = 2
	Symbol_LaTeX       Symbol_PredefinedTypes = 3
	Symbol_HTML        Symbol_PredefinedTypes = 4
	Symbol_MathML      Symbol_PredefinedTypes = 5
	Symbol_SVG         Symbol_PredefinedTypes = 6
)

// Enum value maps for Symbol_PredefinedTypes.
var (
	Symbol_PredefinedTypes_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "ASCII",
		2: "Unicode",
		3: "LaTeX",
		4: "HTML",
		5: "MathML",
		6: "SVG",
	}
	Symbol_PredefinedTypes_value = map[string]int32{
		"UNSPECIFIED": 0,
		"ASCII":       1,
		"Unicode":     2,
		"LaTeX":       3,
		"HTML":        4,
		"MathML":      5,
		"SVG":         6,
	}
)

func (x Symbol_PredefinedTypes) Enum() *Symbol_PredefinedTypes {
	p := new(Symbol_PredefinedTypes)
	*p = x
	return p
}

func (x Symbol_PredefinedTypes) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Symbol_PredefinedTypes) Descriptor() protoreflect.EnumDescriptor {
	return file_units_proto_enumTypes[0].Descriptor()
}

func (Symbol_PredefinedTypes) Type() protoreflect.EnumType {
	return &file_units_proto_enumTypes[0]
}

func (x Symbol_PredefinedTypes) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Symbol_PredefinedTypes.Descriptor instead.
func (Symbol_PredefinedTypes) EnumDescriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{1, 0}
}

type EnumeratedRootUnit_Unit int32

const (
	EnumeratedRootUnit_meter                                     EnumeratedRootUnit_Unit = 0
	EnumeratedRootUnit_gram                                      EnumeratedRootUnit_Unit = 1
	EnumeratedRootUnit_second                                    EnumeratedRootUnit_Unit = 2
	EnumeratedRootUnit_ampere                                    EnumeratedRootUnit_Unit = 3
	EnumeratedRootUnit_kelvin                                    EnumeratedRootUnit_Unit = 4
	EnumeratedRootUnit_mole                                      EnumeratedRootUnit_Unit = 5
	EnumeratedRootUnit_candela                                   EnumeratedRootUnit_Unit = 6
	EnumeratedRootUnit_radian                                    EnumeratedRootUnit_Unit = 7
	EnumeratedRootUnit_steradian                                 EnumeratedRootUnit_Unit = 8
	EnumeratedRootUnit_hertz                                     EnumeratedRootUnit_Unit = 9
	EnumeratedRootUnit_newton                                    EnumeratedRootUnit_Unit = 10
	EnumeratedRootUnit_pascal                                    EnumeratedRootUnit_Unit = 11
	EnumeratedRootUnit_joule                                     EnumeratedRootUnit_Unit = 12
	EnumeratedRootUnit_watt                                      EnumeratedRootUnit_Unit = 13
	EnumeratedRootUnit_coulomb                                   EnumeratedRootUnit_Unit = 14
	EnumeratedRootUnit_volt                                      EnumeratedRootUnit_Unit = 15
	EnumeratedRootUnit_farad                                     EnumeratedRootUnit_Unit = 16
	EnumeratedRootUnit_ohm                                       EnumeratedRootUnit_Unit = 17
	EnumeratedRootUnit_siemens                                   EnumeratedRootUnit_Unit = 18
	EnumeratedRootUnit_weber                                     EnumeratedRootUnit_Unit = 19
	EnumeratedRootUnit_tesla                                     EnumeratedRootUnit_Unit = 20
	EnumeratedRootUnit_henry                                     EnumeratedRootUnit_Unit = 21
	EnumeratedRootUnit_degree_Celsius                            EnumeratedRootUnit_Unit = 22
	EnumeratedRootUnit_lumen                                     EnumeratedRootUnit_Unit = 23
	EnumeratedRootUnit_lux                                       EnumeratedRootUnit_Unit = 24
	EnumeratedRootUnit_katal                                     EnumeratedRootUnit_Unit = 25
	EnumeratedRootUnit_becquerel                                 EnumeratedRootUnit_Unit = 26
	EnumeratedRootUnit_gray                                      EnumeratedRootUnit_Unit = 27
	EnumeratedRootUnit_sievert                                   EnumeratedRootUnit_Unit = 28
	EnumeratedRootUnit_minute                                    EnumeratedRootUnit_Unit = 29
	EnumeratedRootUnit_hour                                      EnumeratedRootUnit_Unit = 30
	EnumeratedRootUnit_day                                       EnumeratedRootUnit_Unit = 31
	EnumeratedRootUnit_arc_degree                                EnumeratedRootUnit_Unit = 32
	EnumeratedRootUnit_arc_minute                                EnumeratedRootUnit_Unit = 33
	EnumeratedRootUnit_arc_second                                EnumeratedRootUnit_Unit = 34
	EnumeratedRootUnit_liter                                     EnumeratedRootUnit_Unit = 35
	EnumeratedRootUnit_metric_ton                                EnumeratedRootUnit_Unit = 36
	EnumeratedRootUnit_electronvolt                              EnumeratedRootUnit_Unit = 37
	EnumeratedRootUnit_unified_atomic_mass_unit                  EnumeratedRootUnit_Unit = 38
	EnumeratedRootUnit_astronomical_unit                         EnumeratedRootUnit_Unit = 39
	EnumeratedRootUnit_atomic_unit_of_1st_hyperpolarizability    EnumeratedRootUnit_Unit = 40
	EnumeratedRootUnit_atomic_unit_of_2nd_hyperpolarizability    EnumeratedRootUnit_Unit = 41
	EnumeratedRootUnit_atomic_unit_of_action                     EnumeratedRootUnit_Unit = 42
	EnumeratedRootUnit_atomic_unit_of_charge                     EnumeratedRootUnit_Unit = 43
	EnumeratedRootUnit_atomic_unit_of_charge_density             EnumeratedRootUnit_Unit = 44
	EnumeratedRootUnit_atomic_unit_of_current                    EnumeratedRootUnit_Unit = 45
	EnumeratedRootUnit_atomic_unit_of_electric_dipole_moment     EnumeratedRootUnit_Unit = 46
	EnumeratedRootUnit_atomic_unit_of_electric_field             EnumeratedRootUnit_Unit = 47
	EnumeratedRootUnit_atomic_unit_of_electric_field_gradient    EnumeratedRootUnit_Unit = 48
	EnumeratedRootUnit_atomic_unit_of_electric_polarizability    EnumeratedRootUnit_Unit = 49
	EnumeratedRootUnit_atomic_unit_of_electric_potential         EnumeratedRootUnit_Unit = 50
	EnumeratedRootUnit_atomic_unit_of_electric_quadrupole_moment EnumeratedRootUnit_Unit = 51
	EnumeratedRootUnit_atomic_unit_of_energy                     EnumeratedRootUnit_Unit = 52
	EnumeratedRootUnit_atomic_unit_of_force                      EnumeratedRootUnit_Unit = 53
	EnumeratedRootUnit_atomic_unit_of_length                     EnumeratedRootUnit_Unit = 54
	EnumeratedRootUnit_atomic_unit_of_magnetic_dipole_moment     EnumeratedRootUnit_Unit = 55
	EnumeratedRootUnit_atomic_unit_of_magnetic_flux_density      EnumeratedRootUnit_Unit = 56
	EnumeratedRootUnit_atomic_unit_of_magnetizability            EnumeratedRootUnit_Unit = 57
	EnumeratedRootUnit_atomic_unit_of_mass                       EnumeratedRootUnit_Unit = 58
	EnumeratedRootUnit_atomic_unit_of_momentum                   EnumeratedRootUnit_Unit = 59
	EnumeratedRootUnit_atomic_unit_of_permittivity               EnumeratedRootUnit_Unit = 60
	EnumeratedRootUnit_atomic_unit_of_time                       EnumeratedRootUnit_Unit = 61
	EnumeratedRootUnit_atomic_unit_of_velocity                   EnumeratedRootUnit_Unit = 62
	EnumeratedRootUnit_natural_unit_of_action                    EnumeratedRootUnit_Unit = 63
	EnumeratedRootUnit_natural_unit_of_action_in_eV_s            EnumeratedRootUnit_Unit = 64
	EnumeratedRootUnit_natural_unit_of_energy                    EnumeratedRootUnit_Unit = 65
	EnumeratedRootUnit_natural_unit_of_energy_in_MeV             EnumeratedRootUnit_Unit = 66
	EnumeratedRootUnit_natural_unit_of_length                    EnumeratedRootUnit_Unit = 67
	EnumeratedRootUnit_natural_unit_of_mass                      EnumeratedRootUnit_Unit = 68
	EnumeratedRootUnit_natural_unit_of_momentum                  EnumeratedRootUnit_Unit = 69
	EnumeratedRootUnit_natural_unit_of_momentum_in_MeV_per_c     EnumeratedRootUnit_Unit = 70
	EnumeratedRootUnit_natural_unit_of_time                      EnumeratedRootUnit_Unit = 71
	EnumeratedRootUnit_natural_unit_of_velocity                  EnumeratedRootUnit_Unit = 72
	EnumeratedRootUnit_nautical_mile                             EnumeratedRootUnit_Unit = 73
	EnumeratedRootUnit_knot                                      EnumeratedRootUnit_Unit = 74
	EnumeratedRootUnit_angstrom                                  EnumeratedRootUnit_Unit = 75
	EnumeratedRootUnit_are                                       EnumeratedRootUnit_Unit = 76
	EnumeratedRootUnit_hectare                                   EnumeratedRootUnit_Unit = 77
	EnumeratedRootUnit_barn                                      EnumeratedRootUnit_Unit = 78
	EnumeratedRootUnit_bar                                       EnumeratedRootUnit_Unit = 79
	EnumeratedRootUnit_gal                                       EnumeratedRootUnit_Unit = 80
	EnumeratedRootUnit_curie                                     EnumeratedRootUnit_Unit = 81
	EnumeratedRootUnit_roentgen                                  EnumeratedRootUnit_Unit = 82
	EnumeratedRootUnit_rad                                       EnumeratedRootUnit_Unit = 83
	EnumeratedRootUnit_rem                                       EnumeratedRootUnit_Unit = 84
	EnumeratedRootUnit_erg                                       EnumeratedRootUnit_Unit = 85
	EnumeratedRootUnit_dyne                                      EnumeratedRootUnit_Unit = 86
	EnumeratedRootUnit_barye                                     EnumeratedRootUnit_Unit = 87
	EnumeratedRootUnit_poise                                     EnumeratedRootUnit_Unit = 88
	EnumeratedRootUnit_rhe                                       EnumeratedRootUnit_Unit = 89
	EnumeratedRootUnit_stokes                                    EnumeratedRootUnit_Unit = 90
	EnumeratedRootUnit_darcy                                     EnumeratedRootUnit_Unit = 91
	EnumeratedRootUnit_kayser                                    EnumeratedRootUnit_Unit = 92
	EnumeratedRootUnit_lambert                                   EnumeratedRootUnit_Unit = 93
	EnumeratedRootUnit_phot                                      EnumeratedRootUnit_Unit = 94
	EnumeratedRootUnit_thermo_calorie                            EnumeratedRootUnit_Unit = 95
	EnumeratedRootUnit_table_calorie                             EnumeratedRootUnit_Unit = 96
	EnumeratedRootUnit_debye                                     EnumeratedRootUnit_Unit = 97
	EnumeratedRootUnit_abampere                                  EnumeratedRootUnit_Unit = 98
	EnumeratedRootUnit_abcoulomb                                 EnumeratedRootUnit_Unit = 99
	EnumeratedRootUnit_abfarad                                   EnumeratedRootUnit_Unit = 100
	EnumeratedRootUnit_abhenry                                   EnumeratedRootUnit_Unit = 101
	EnumeratedRootUnit_abohm                                     EnumeratedRootUnit_Unit = 102
	EnumeratedRootUnit_abmho                                     EnumeratedRootUnit_Unit = 103
	EnumeratedRootUnit_abvolt                                    EnumeratedRootUnit_Unit = 104
	EnumeratedRootUnit_abwatt                                    EnumeratedRootUnit_Unit = 105
	EnumeratedRootUnit_maxwell                                   EnumeratedRootUnit_Unit = 106
	EnumeratedRootUnit_gauss                                     EnumeratedRootUnit_Unit = 107
	EnumeratedRootUnit_gilbert                                   EnumeratedRootUnit_Unit = 108
	EnumeratedRootUnit_oersted                                   EnumeratedRootUnit_Unit = 109
	EnumeratedRootUnit_stilb                                     EnumeratedRootUnit_Unit = 110
	EnumeratedRootUnit_statampere                                EnumeratedRootUnit_Unit = 111
	EnumeratedRootUnit_statcoulomb                               EnumeratedRootUnit_Unit = 112
	EnumeratedRootUnit_statfarad                                 EnumeratedRootUnit_Unit = 113
	EnumeratedRootUnit_stathenry                                 EnumeratedRootUnit_Unit = 114
	EnumeratedRootUnit_statohm                                   EnumeratedRootUnit_Unit = 115
	EnumeratedRootUnit_statmho                                   EnumeratedRootUnit_Unit = 116
	EnumeratedRootUnit_statvolt                                  EnumeratedRootUnit_Unit = 117
	EnumeratedRootUnit_statwatt                                  EnumeratedRootUnit_Unit = 118
	EnumeratedRootUnit_statweber                                 EnumeratedRootUnit_Unit = 119
	EnumeratedRootUnit_stattesla                                 EnumeratedRootUnit_Unit = 120
	EnumeratedRootUnit_long_ton                                  EnumeratedRootUnit_Unit = 121
	EnumeratedRootUnit_short_ton                                 EnumeratedRootUnit_Unit = 122
	EnumeratedRootUnit_gross_hundredweight                       EnumeratedRootUnit_Unit = 123
	EnumeratedRootUnit_hundredweight                             EnumeratedRootUnit_Unit = 124
	EnumeratedRootUnit_av_pound                                  EnumeratedRootUnit_Unit = 125
	EnumeratedRootUnit_av_ounce                                  EnumeratedRootUnit_Unit = 126
	EnumeratedRootUnit_av_dram                                   EnumeratedRootUnit_Unit = 127
	EnumeratedRootUnit_troy_pound                                EnumeratedRootUnit_Unit = 128
	EnumeratedRootUnit_troy_ounce                                EnumeratedRootUnit_Unit = 129
	EnumeratedRootUnit_pennyweight                               EnumeratedRootUnit_Unit = 130
	EnumeratedRootUnit_apothecaries_dram                         EnumeratedRootUnit_Unit = 131
	EnumeratedRootUnit_scruple                                   EnumeratedRootUnit_Unit = 132
	EnumeratedRootUnit_grain                                     EnumeratedRootUnit_Unit = 133
	EnumeratedRootUnit_slug                                      EnumeratedRootUnit_Unit = 134
	EnumeratedRootUnit_pound_force                               EnumeratedRootUnit_Unit = 135
	EnumeratedRootUnit_poundal                                   EnumeratedRootUnit_Unit = 136
	EnumeratedRootUnit_kip                                       EnumeratedRootUnit_Unit = 137
	EnumeratedRootUnit_ton_force                                 EnumeratedRootUnit_Unit = 138
	EnumeratedRootUnit_gram_force                                EnumeratedRootUnit_Unit = 139
	EnumeratedRootUnit_inch                                      EnumeratedRootUnit_Unit = 140
	EnumeratedRootUnit_foot                                      EnumeratedRootUnit_Unit = 141
	EnumeratedRootUnit_yard                                      EnumeratedRootUnit_Unit = 142
	EnumeratedRootUnit_mile                                      EnumeratedRootUnit_Unit = 143
	EnumeratedRootUnit_us_survey_inch                            EnumeratedRootUnit_Unit = 144
	EnumeratedRootUnit_us_survey_foot                            EnumeratedRootUnit_Unit = 145
	EnumeratedRootUnit_us_survey_yard                            EnumeratedRootUnit_Unit = 146
	EnumeratedRootUnit_us_survey_fathom                          EnumeratedRootUnit_Unit = 147
	EnumeratedRootUnit_us_survey_rod                             EnumeratedRootUnit_Unit = 148
	EnumeratedRootUnit_us_survey_chain                           EnumeratedRootUnit_Unit = 149
	EnumeratedRootUnit_us_survey_link                            EnumeratedRootUnit_Unit = 150
	EnumeratedRootUnit_us_survey_furlong                         EnumeratedRootUnit_Unit = 151
	EnumeratedRootUnit_us_survey_mile                            EnumeratedRootUnit_Unit = 152
	EnumeratedRootUnit_us_acre                                   EnumeratedRootUnit_Unit = 153
	EnumeratedRootUnit_imperial_gallon                           EnumeratedRootUnit_Unit = 154
	EnumeratedRootUnit_imperial_quart                            EnumeratedRootUnit_Unit = 155
	EnumeratedRootUnit_imperial_pint                             EnumeratedRootUnit_Unit = 156
	EnumeratedRootUnit_imperial_gill                             EnumeratedRootUnit_Unit = 157
	EnumeratedRootUnit_imperial_ounce                            EnumeratedRootUnit_Unit = 158
	EnumeratedRootUnit_us_gallon                                 EnumeratedRootUnit_Unit = 159
	EnumeratedRootUnit_us_quart                                  EnumeratedRootUnit_Unit = 160
	EnumeratedRootUnit_us_pint                                   EnumeratedRootUnit_Unit = 161
	EnumeratedRootUnit_us_cup                                    EnumeratedRootUnit_Unit = 162
	EnumeratedRootUnit_us_gill                                   EnumeratedRootUnit_Unit = 163
	EnumeratedRootUnit_us_fluid_ounce                            EnumeratedRootUnit_Unit = 164
	EnumeratedRootUnit_us_fluid_dram                             EnumeratedRootUnit_Unit = 165
	EnumeratedRootUnit_us_minim                                  EnumeratedRootUnit_Unit = 166
	EnumeratedRootUnit_us_tablespoon                             EnumeratedRootUnit_Unit = 167
	EnumeratedRootUnit_us_teaspoon                               EnumeratedRootUnit_Unit = 168
	EnumeratedRootUnit_us_bushel                                 EnumeratedRootUnit_Unit = 169
	EnumeratedRootUnit_us_peck                                   EnumeratedRootUnit_Unit = 170
	EnumeratedRootUnit_us_dry_quart                              EnumeratedRootUnit_Unit = 171
	EnumeratedRootUnit_us_dry_pint                               EnumeratedRootUnit_Unit = 172
	EnumeratedRootUnit_thermo_kg_calorie                         EnumeratedRootUnit_Unit = 173
	EnumeratedRootUnit_table_kg_calorie                          EnumeratedRootUnit_Unit = 174
	EnumeratedRootUnit_us_label_teaspoon                         EnumeratedRootUnit_Unit = 175
	EnumeratedRootUnit_us_label_tablespoon                       EnumeratedRootUnit_Unit = 176
	EnumeratedRootUnit_us_label_cup                              EnumeratedRootUnit_Unit = 177
	EnumeratedRootUnit_us_label_fluid_ounce                      EnumeratedRootUnit_Unit = 178
	EnumeratedRootUnit_us_label_ounce                            EnumeratedRootUnit_Unit = 179
	EnumeratedRootUnit_horsepower                                EnumeratedRootUnit_Unit = 180
	EnumeratedRootUnit_electric_horsepower                       EnumeratedRootUnit_Unit = 181
	EnumeratedRootUnit_boiler_horsepower                         EnumeratedRootUnit_Unit = 182
	EnumeratedRootUnit_metric_horsepower                         EnumeratedRootUnit_Unit = 183
	EnumeratedRootUnit_water_horsepower                          EnumeratedRootUnit_Unit = 184
	EnumeratedRootUnit_uk_horsepower                             EnumeratedRootUnit_Unit = 185
	EnumeratedRootUnit_degree_Fahrenheit                         EnumeratedRootUnit_Unit = 186
	EnumeratedRootUnit_degree_Rankine                            EnumeratedRootUnit_Unit = 187
	EnumeratedRootUnit_torr                                      EnumeratedRootUnit_Unit = 188
	EnumeratedRootUnit_standard_atmosphere                       EnumeratedRootUnit_Unit = 189
	EnumeratedRootUnit_technical_atmosphere                      EnumeratedRootUnit_Unit = 190
	EnumeratedRootUnit_mm_Hg                                     EnumeratedRootUnit_Unit = 191
	EnumeratedRootUnit_cm_Hg                                     EnumeratedRootUnit_Unit = 192
	EnumeratedRootUnit_cm_Hg_0C                                  EnumeratedRootUnit_Unit = 193
	EnumeratedRootUnit_in_Hg                                     EnumeratedRootUnit_Unit = 194
	EnumeratedRootUnit_in_Hg_32F                                 EnumeratedRootUnit_Unit = 195
	EnumeratedRootUnit_in_Hg_60F                                 EnumeratedRootUnit_Unit = 196
	EnumeratedRootUnit_ft_Hg                                     EnumeratedRootUnit_Unit = 197
	EnumeratedRootUnit_mm_water                                  EnumeratedRootUnit_Unit = 198
	EnumeratedRootUnit_cm_water                                  EnumeratedRootUnit_Unit = 199
	EnumeratedRootUnit_cm_water_4C                               EnumeratedRootUnit_Unit = 200
	EnumeratedRootUnit_in_water                                  EnumeratedRootUnit_Unit = 201
	EnumeratedRootUnit_in_water_39F                              EnumeratedRootUnit_Unit = 202
	EnumeratedRootUnit_in_water_60F                              EnumeratedRootUnit_Unit = 203
	EnumeratedRootUnit_ft_water                                  EnumeratedRootUnit_Unit = 204
	EnumeratedRootUnit_ft_water_39F                              EnumeratedRootUnit_Unit = 205
	EnumeratedRootUnit_light_year                                EnumeratedRootUnit_Unit = 206
	EnumeratedRootUnit_light_week                                EnumeratedRootUnit_Unit = 207
	EnumeratedRootUnit_light_hour                                EnumeratedRootUnit_Unit = 208
	EnumeratedRootUnit_light_minute                              EnumeratedRootUnit_Unit = 209
	EnumeratedRootUnit_light_second                              EnumeratedRootUnit_Unit = 210
	EnumeratedRootUnit_parsec                                    EnumeratedRootUnit_Unit = 211
	EnumeratedRootUnit_printers_pica                             EnumeratedRootUnit_Unit = 212
	EnumeratedRootUnit_computer_pica                             EnumeratedRootUnit_Unit = 213
	EnumeratedRootUnit_printers_point                            EnumeratedRootUnit_Unit = 214
	EnumeratedRootUnit_computer_point                            EnumeratedRootUnit_Unit = 215
	EnumeratedRootUnit_thermo_btu                                EnumeratedRootUnit_Unit = 216
	EnumeratedRootUnit_table_btu                                 EnumeratedRootUnit_Unit = 217
	EnumeratedRootUnit_mean_btu                                  EnumeratedRootUnit_Unit = 218
	EnumeratedRootUnit_btu_39F                                   EnumeratedRootUnit_Unit = 219
	EnumeratedRootUnit_btu_59F                                   EnumeratedRootUnit_Unit = 220
	EnumeratedRootUnit_btu_60F                                   EnumeratedRootUnit_Unit = 221
	EnumeratedRootUnit_tons_of_tnt                               EnumeratedRootUnit_Unit = 222
	EnumeratedRootUnit_ec_therm                                  EnumeratedRootUnit_Unit = 223
	EnumeratedRootUnit_us_therm                                  EnumeratedRootUnit_Unit = 224
	EnumeratedRootUnit_year_365                                  EnumeratedRootUnit_Unit = 225
	EnumeratedRootUnit_tropical_year                             EnumeratedRootUnit_Unit = 226
	EnumeratedRootUnit_sidereal_year                             EnumeratedRootUnit_Unit = 227
	EnumeratedRootUnit_sidereal_day                              EnumeratedRootUnit_Unit = 228
	EnumeratedRootUnit_sidereal_hour                             EnumeratedRootUnit_Unit = 229
	EnumeratedRootUnit_sidereal_minute                           EnumeratedRootUnit_Unit = 230
	EnumeratedRootUnit_sidereal_second                           EnumeratedRootUnit_Unit = 231
	EnumeratedRootUnit_shake                                     EnumeratedRootUnit_Unit = 232
	EnumeratedRootUnit_denier                                    EnumeratedRootUnit_Unit = 233
	EnumeratedRootUnit_tex                                       EnumeratedRootUnit_Unit = 234
	EnumeratedRootUnit_gon                                       EnumeratedRootUnit_Unit = 235
	EnumeratedRootUnit_nato_mil                                  EnumeratedRootUnit_Unit = 236
	EnumeratedRootUnit_pound_mole                                EnumeratedRootUnit_Unit = 237
	EnumeratedRootUnit_ton_refrigeration                         EnumeratedRootUnit_Unit = 238
	EnumeratedRootUnit_circular_mil                              EnumeratedRootUnit_Unit = 239
	EnumeratedRootUnit_bel                                       EnumeratedRootUnit_Unit = 240
	EnumeratedRootUnit_neper                                     EnumeratedRootUnit_Unit = 241
	EnumeratedRootUnit_pH                                        EnumeratedRootUnit_Unit = 242
	EnumeratedRootUnit_petro_barrel                              EnumeratedRootUnit_Unit = 243
	EnumeratedRootUnit_footlambert                               EnumeratedRootUnit_Unit = 244
	EnumeratedRootUnit_footcandle                                EnumeratedRootUnit_Unit = 245
	EnumeratedRootUnit_carat                                     EnumeratedRootUnit_Unit = 246
	EnumeratedRootUnit_bit                                       EnumeratedRootUnit_Unit = 247
	EnumeratedRootUnit_byte                                      EnumeratedRootUnit_Unit = 248
)

// Enum value maps for EnumeratedRootUnit_Unit.
var (
	EnumeratedRootUnit_Unit_name = map[int32]string{
		0:   "meter",
		1:   "gram",
		2:   "second",
		3:   "ampere",
		4:   "kelvin",
		5:   "mole",
		6:   "candela",
		7:   "radian",
		8:   "steradian",
		9:   "hertz",
		10:  "newton",
		11:  "pascal",
		12:  "joule",
		13:  "watt",
		14:  "coulomb",
		15:  "volt",
		16:  "farad",
		17:  "ohm",
		18:  "siemens",
		19:  "weber",
		20:  "tesla",
		21:  "henry",
		22:  "degree_Celsius",
		23:  "lumen",
		24:  "lux",
		25:  "katal",
		26:  "becquerel",
		27:  "gray",
		28:  "sievert",
		29:  "minute",
		30:  "hour",
		31:  "day",
		32:  "arc_degree",
		33:  "arc_minute",
		34:  "arc_second",
		35:  "liter",
		36:  "metric_ton",
		37:  "electronvolt",
		38:  "unified_atomic_mass_unit",
		39:  "astronomical_unit",
		40:  "atomic_unit_of_1st_hyperpolarizability",
		41:  "atomic_unit_of_2nd_hyperpolarizability",
		42:  "atomic_unit_of_action",
		43:  "atomic_unit_of_charge",
		44:  "atomic_unit_of_charge_density",
		45:  "atomic_unit_of_current",
		46:  "atomic_unit_of_electric_dipole_moment",
		47:  "atomic_unit_of_electric_field",
		48:  "atomic_unit_of_electric_field_gradient",
		49:  "atomic_unit_of_electric_polarizability",
		50:  "atomic_unit_of_electric_potential",
		51:  "atomic_unit_of_electric_quadrupole_moment",
		52:  "atomic_unit_of_energy",
		53:  "atomic_unit_of_force",
		54:  "atomic_unit_of_length",
		55:  "atomic_unit_of_magnetic_dipole_moment",
		56:  "atomic_unit_of_magnetic_flux_density",
		57:  "atomic_unit_of_magnetizability",
		58:  "atomic_unit_of_mass",
		59:  "atomic_unit_of_momentum",
		60:  "atomic_unit_of_permittivity",
		61:  "atomic_unit_of_time",
		62:  "atomic_unit_of_velocity",
		63:  "natural_unit_of_action",
		64:  "natural_unit_of_action_in_eV_s",
		65:  "natural_unit_of_energy",
		66:  "natural_unit_of_energy_in_MeV",
		67:  "natural_unit_of_length",
		68:  "natural_unit_of_mass",
		69:  "natural_unit_of_momentum",
		70:  "natural_unit_of_momentum_in_MeV_per_c",
		71:  "natural_unit_of_time",
		72:  "natural_unit_of_velocity",
		73:  "nautical_mile",
		74:  "knot",
		75:  "angstrom",
		76:  "are",
		77:  "hectare",
		78:  "barn",
		79:  "bar",
		80:  "gal",
		81:  "curie",
		82:  "roentgen",
		83:  "rad",
		84:  "rem",
		85:  "erg",
		86:  "dyne",
		87:  "barye",
		88:  "poise",
		89:  "rhe",
		90:  "stokes",
		91:  "darcy",
		92:  "kayser",
		93:  "lambert",
		94:  "phot",
		95:  "thermo_calorie",
		96:  "table_calorie",
		97:  "debye",
		98:  "abampere",
		99:  "abcoulomb",
		100: "abfarad",
		101: "abhenry",
		102: "abohm",
		103: "abmho",
		104: "abvolt",
		105: "abwatt",
		106: "maxwell",
		107: "gauss",
		108: "gilbert",
		109: "oersted",
		110: "stilb",
		111: "statampere",
		112: "statcoulomb",
		113: "statfarad",
		114: "stathenry",
		115: "statohm",
		116: "statmho",
		117: "statvolt",
		118: "statwatt",
		119: "statweber",
		120: "stattesla",
		121: "long_ton",
		122: "short_ton",
		123: "gross_hundredweight",
		124: "hundredweight",
		125: "av_pound",
		126: "av_ounce",
		127: "av_dram",
		128: "troy_pound",
		129: "troy_ounce",
		130: "pennyweight",
		131: "apothecaries_dram",
		132: "scruple",
		133: "grain",
		134: "slug",
		135: "pound_force",
		136: "poundal",
		137: "kip",
		138: "ton_force",
		139: "gram_force",
		140: "inch",
		141: "foot",
		142: "yard",
		143: "mile",
		144: "us_survey_inch",
		145: "us_survey_foot",
		146: "us_survey_yard",
		147: "us_survey_fathom",
		148: "us_survey_rod",
		149: "us_survey_chain",
		150: "us_survey_link",
		151: "us_survey_furlong",
		152: "us_survey_mile",
		153: "us_acre",
		154: "imperial_gallon",
		155: "imperial_quart",
		156: "imperial_pint",
		157: "imperial_gill",
		158: "imperial_ounce",
		159: "us_gallon",
		160: "us_quart",
		161: "us_pint",
		162: "us_cup",
		163: "us_gill",
		164: "us_fluid_ounce",
		165: "us_fluid_dram",
		166: "us_minim",
		167: "us_tablespoon",
		168: "us_teaspoon",
		169: "us_bushel",
		170: "us_peck",
		171: "us_dry_quart",
		172: "us_dry_pint",
		173: "thermo_kg_calorie",
		174: "table_kg_calorie",
		175: "us_label_teaspoon",
		176: "us_label_tablespoon",
		177: "us_label_cup",
		178: "us_label_fluid_ounce",
		179: "us_label_ounce",
		180: "horsepower",
		181: "electric_horsepower",
		182: "boiler_horsepower",
		183: "metric_horsepower",
		184: "water_horsepower",
		185: "uk_horsepower",
		186: "degree_Fahrenheit",
		187: "degree_Rankine",
		188: "torr",
		189: "standard_atmosphere",
		190: "technical_atmosphere",
		191: "mm_Hg",
		192: "cm_Hg",
		193: "cm_Hg_0C",
		194: "in_Hg",
		195: "in_Hg_32F",
		196: "in_Hg_60F",
		197: "ft_Hg",
		198: "mm_water",
		199: "cm_water",
		200: "cm_water_4C",
		201: "in_water",
		202: "in_water_39F",
		203: "in_water_60F",
		204: "ft_water",
		205: "ft_water_39F",
		206: "light_year",
		207: "light_week",
		208: "light_hour",
		209: "light_minute",
		210: "light_second",
		211: "parsec",
		212: "printers_pica",
		213: "computer_pica",
		214: "printers_point",
		215: "computer_point",
		216: "thermo_btu",
		217: "table_btu",
		218: "mean_btu",
		219: "btu_39F",
		220: "btu_59F",
		221: "btu_60F",
		222: "tons_of_tnt",
		223: "ec_therm",
		224: "us_therm",
		225: "year_365",
		226: "tropical_year",
		227: "sidereal_year",
		228: "sidereal_day",
		229: "sidereal_hour",
		230: "sidereal_minute",
		231: "sidereal_second",
		232: "shake",
		233: "denier",
		234: "tex",
		235: "gon",
		236: "nato_mil",
		237: "pound_mole",
		238: "ton_refrigeration",
		239: "circular_mil",
		240: "bel",
		241: "neper",
		242: "pH",
		243: "petro_barrel",
		244: "footlambert",
		245: "footcandle",
		246: "carat",
		247: "bit",
		248: "byte",
	}
	EnumeratedRootUnit_Unit_value = map[string]int32{
		"meter":                                  0,
		"gram":                                   1,
		"second":                                 2,
		"ampere":                                 3,
		"kelvin":                                 4,
		"mole":                                   5,
		"candela":                                6,
		"radian":                                 7,
		"steradian":                              8,
		"hertz":                                  9,
		"newton":                                 10,
		"pascal":                                 11,
		"joule":                                  12,
		"watt":                                   13,
		"coulomb":                                14,
		"volt":                                   15,
		"farad":                                  16,
		"ohm":                                    17,
		"siemens":                                18,
		"weber":                                  19,
		"tesla":                                  20,
		"henry":                                  21,
		"degree_Celsius":                         22,
		"lumen":                                  23,
		"lux":                                    24,
		"katal":                                  25,
		"becquerel":                              26,
		"gray":                                   27,
		"sievert":                                28,
		"minute":                                 29,
		"hour":                                   30,
		"day":                                    31,
		"arc_degree":                             32,
		"arc_minute":                             33,
		"arc_second":                             34,
		"liter":                                  35,
		"metric_ton":                             36,
		"electronvolt":                           37,
		"unified_atomic_mass_unit":               38,
		"astronomical_unit":                      39,
		"atomic_unit_of_1st_hyperpolarizability": 40,
		"atomic_unit_of_2nd_hyperpolarizability": 41,
		"atomic_unit_of_action":                  42,
		"atomic_unit_of_charge":                  43,
		"atomic_unit_of_charge_density":          44,
		"atomic_unit_of_current":                 45,
		"atomic_unit_of_electric_dipole_moment":  46,
		"atomic_unit_of_electric_field":          47,
		"atomic_unit_of_electric_field_gradient": 48,
		"atomic_unit_of_electric_polarizability": 49,
		"atomic_unit_of_electric_potential":      50,
		"atomic_unit_of_electric_quadrupole_moment": 51,
		"atomic_unit_of_energy":                     52,
		"atomic_unit_of_force":                      53,
		"atomic_unit_of_length":                     54,
		"atomic_unit_of_magnetic_dipole_moment":     55,
		"atomic_unit_of_magnetic_flux_density":      56,
		"atomic_unit_of_magnetizability":            57,
		"atomic_unit_of_mass":                       58,
		"atomic_unit_of_momentum":                   59,
		"atomic_unit_of_permittivity":               60,
		"atomic_unit_of_time":                       61,
		"atomic_unit_of_velocity":                   62,
		"natural_unit_of_action":                    63,
		"natural_unit_of_action_in_eV_s":            64,
		"natural_unit_of_energy":                    65,
		"natural_unit_of_energy_in_MeV":             66,
		"natural_unit_of_length":                    67,
		"natural_unit_of_mass":                      68,
		"natural_unit_of_momentum":                  69,
		"natural_unit_of_momentum_in_MeV_per_c":     70,
		"natural_unit_of_time":                      71,
		"natural_unit_of_velocity":                  72,
		"nautical_mile":                             73,
		"knot":                                      74,
		"angstrom":                                  75,
		"are":                                       76,
		"hectare":                                   77,
		"barn":                                      78,
		"bar":                                       79,
		"gal":                                       80,
		"curie":                                     81,
		"roentgen":                                  82,
		"rad":                                       83,
		"rem":                                       84,
		"erg":                                       85,
		"dyne":                                      86,
		"barye":                                     87,
		"poise":                                     88,
		"rhe":                                       89,
		"stokes":                                    90,
		"darcy":                                     91,
		"kayser":                                    92,
		"lambert":                                   93,
		"phot":                                      94,
		"thermo_calorie":                            95,
		"table_calorie":                             96,
		"debye":                                     97,
		"abampere":                                  98,
		"abcoulomb":                                 99,
		"abfarad":                                   100,
		"abhenry":                                   101,
		"abohm":                                     102,
		"abmho":                                     103,
		"abvolt":                                    104,
		"abwatt":                                    105,
		"maxwell":                                   106,
		"gauss":                                     107,
		"gilbert":                                   108,
		"oersted":                                   109,
		"stilb":                                     110,
		"statampere":                                111,
		"statcoulomb":                               112,
		"statfarad":                                 113,
		"stathenry":                                 114,
		"statohm":                                   115,
		"statmho":                                   116,
		"statvolt":                                  117,
		"statwatt":                                  118,
		"statweber":                                 119,
		"stattesla":                                 120,
		"long_ton":                                  121,
		"short_ton":                                 122,
		"gross_hundredweight":                       123,
		"hundredweight":                             124,
		"av_pound":                                  125,
		"av_ounce":                                  126,
		"av_dram":                                   127,
		"troy_pound":                                128,
		"troy_ounce":                                129,
		"pennyweight":                               130,
		"apothecaries_dram":                         131,
		"scruple":                                   132,
		"grain":                                     133,
		"slug":                                      134,
		"pound_force":                               135,
		"poundal":                                   136,
		"kip":                                       137,
		"ton_force":                                 138,
		"gram_force":                                139,
		"inch":                                      140,
		"foot":                                      141,
		"yard":                                      142,
		"mile":                                      143,
		"us_survey_inch":                            144,
		"us_survey_foot":                            145,
		"us_survey_yard":                            146,
		"us_survey_fathom":                          147,
		"us_survey_rod":                             148,
		"us_survey_chain":                           149,
		"us_survey_link":                            150,
		"us_survey_furlong":                         151,
		"us_survey_mile":                            152,
		"us_acre":                                   153,
		"imperial_gallon":                           154,
		"imperial_quart":                            155,
		"imperial_pint":                             156,
		"imperial_gill":                             157,
		"imperial_ounce":                            158,
		"us_gallon":                                 159,
		"us_quart":                                  160,
		"us_pint":                                   161,
		"us_cup":                                    162,
		"us_gill":                                   163,
		"us_fluid_ounce":                            164,
		"us_fluid_dram":                             165,
		"us_minim":                                  166,
		"us_tablespoon":                             167,
		"us_teaspoon":                               168,
		"us_bushel":                                 169,
		"us_peck":                                   170,
		"us_dry_quart":                              171,
		"us_dry_pint":                               172,
		"thermo_kg_calorie":                         173,
		"table_kg_calorie":                          174,
		"us_label_teaspoon":                         175,
		"us_label_tablespoon":                       176,
		"us_label_cup":                              177,
		"us_label_fluid_ounce":                      178,
		"us_label_ounce":                            179,
		"horsepower":                                180,
		"electric_horsepower":                       181,
		"boiler_horsepower":                         182,
		"metric_horsepower":                         183,
		"water_horsepower":                          184,
		"uk_horsepower":                             185,
		"degree_Fahrenheit":                         186,
		"degree_Rankine":                            187,
		"torr":                                      188,
		"standard_atmosphere":                       189,
		"technical_atmosphere":                      190,
		"mm_Hg":                                     191,
		"cm_Hg":                                     192,
		"cm_Hg_0C":                                  193,
		"in_Hg":                                     194,
		"in_Hg_32F":                                 195,
		"in_Hg_60F":                                 196,
		"ft_Hg":                                     197,
		"mm_water":                                  198,
		"cm_water":                                  199,
		"cm_water_4C":                               200,
		"in_water":                                  201,
		"in_water_39F":                              202,
		"in_water_60F":                              203,
		"ft_water":                                  204,
		"ft_water_39F":                              205,
		"light_year":                                206,
		"light_week":                                207,
		"light_hour":                                208,
		"light_minute":                              209,
		"light_second":                              210,
		"parsec":                                    211,
		"printers_pica":                             212,
		"computer_pica":                             213,
		"printers_point":                            214,
		"computer_point":                            215,
		"thermo_btu":                                216,
		"table_btu":                                 217,
		"mean_btu":                                  218,
		"btu_39F":                                   219,
		"btu_59F":                                   220,
		"btu_60F":                                   221,
		"tons_of_tnt":                               222,
		"ec_therm":                                  223,
		"us_therm":                                  224,
		"year_365":                                  225,
		"tropical_year":                             226,
		"sidereal_year":                             227,
		"sidereal_day":                              228,
		"sidereal_hour":                             229,
		"sidereal_minute":                           230,
		"sidereal_second":                           231,
		"shake":                                     232,
		"denier":                                    233,
		"tex":                                       234,
		"gon":                                       235,
		"nato_mil":                                  236,
		"pound_mole":                                237,
		"ton_refrigeration":                         238,
		"circular_mil":                              239,
		"bel":                                       240,
		"neper":                                     241,
		"pH":                                        242,
		"petro_barrel":                              243,
		"footlambert":                               244,
		"footcandle":                                245,
		"carat":                                     246,
		"bit":                                       247,
		"byte":                                      248,
	}
)

func (x EnumeratedRootUnit_Unit) Enum() *EnumeratedRootUnit_Unit {
	p := new(EnumeratedRootUnit_Unit)
	*p = x
	return p
}

func (x EnumeratedRootUnit_Unit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumeratedRootUnit_Unit) Descriptor() protoreflect.EnumDescriptor {
	return file_units_proto_enumTypes[1].Descriptor()
}

func (EnumeratedRootUnit_Unit) Type() protoreflect.EnumType {
	return &file_units_proto_enumTypes[1]
}

func (x EnumeratedRootUnit_Unit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumeratedRootUnit_Unit.Descriptor instead.
func (EnumeratedRootUnit_Unit) EnumDescriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{9, 0}
}

type EnumeratedRootUnit_Prefix int32

const (
	EnumeratedRootUnit_uni   EnumeratedRootUnit_Prefix = 0
	EnumeratedRootUnit_yotta EnumeratedRootUnit_Prefix = 1
	EnumeratedRootUnit_zetta EnumeratedRootUnit_Prefix = 2
	EnumeratedRootUnit_exa   EnumeratedRootUnit_Prefix = 3
	EnumeratedRootUnit_peta  EnumeratedRootUnit_Prefix = 4
	EnumeratedRootUnit_tera  EnumeratedRootUnit_Prefix = 5
	EnumeratedRootUnit_giga  EnumeratedRootUnit_Prefix = 6
	EnumeratedRootUnit_mega  EnumeratedRootUnit_Prefix = 7
	EnumeratedRootUnit_kilo  EnumeratedRootUnit_Prefix = 8
	EnumeratedRootUnit_hecto EnumeratedRootUnit_Prefix = 9
	EnumeratedRootUnit_deka  EnumeratedRootUnit_Prefix = 10
	EnumeratedRootUnit_deci  EnumeratedRootUnit_Prefix = 11
	EnumeratedRootUnit_centi EnumeratedRootUnit_Prefix = 12
	EnumeratedRootUnit_milli EnumeratedRootUnit_Prefix = 13
	EnumeratedRootUnit_micro EnumeratedRootUnit_Prefix = 14
	EnumeratedRootUnit_nano  EnumeratedRootUnit_Prefix = 15
	EnumeratedRootUnit_pico  EnumeratedRootUnit_Prefix = 16
	EnumeratedRootUnit_femto EnumeratedRootUnit_Prefix = 17
	EnumeratedRootUnit_atto  EnumeratedRootUnit_Prefix = 18
	EnumeratedRootUnit_zepto EnumeratedRootUnit_Prefix = 19
	EnumeratedRootUnit_yocto EnumeratedRootUnit_Prefix = 20
	EnumeratedRootUnit_kibi  EnumeratedRootUnit_Prefix = 21
	EnumeratedRootUnit_mebi  EnumeratedRootUnit_Prefix = 22
	EnumeratedRootUnit_gibi  EnumeratedRootUnit_Prefix = 23
	EnumeratedRootUnit_tebi  EnumeratedRootUnit_Prefix = 24
	EnumeratedRootUnit_pebi  EnumeratedRootUnit_Prefix = 25
	EnumeratedRootUnit_exbi  EnumeratedRootUnit_Prefix = 26
	EnumeratedRootUnit_zebi  EnumeratedRootUnit_Prefix = 27
	EnumeratedRootUnit_yobi  EnumeratedRootUnit_Prefix = 28
)

// Enum value maps for EnumeratedRootUnit_Prefix.
var (
	EnumeratedRootUnit_Prefix_name = map[int32]string{
		0:  "uni",
		1:  "yotta",
		2:  "zetta",
		3:  "exa",
		4:  "peta",
		5:  "tera",
		6:  "giga",
		7:  "mega",
		8:  "kilo",
		9:  "hecto",
		10: "deka",
		11: "deci",
		12: "centi",
		13: "milli",
		14: "micro",
		15: "nano",
		16: "pico",
		17: "femto",
		18: "atto",
		19: "zepto",
		20: "yocto",
		21: "kibi",
		22: "mebi",
		23: "gibi",
		24: "tebi",
		25: "pebi",
		26: "exbi",
		27: "zebi",
		28: "yobi",
	}
	EnumeratedRootUnit_Prefix_value = map[string]int32{
		"uni":   0,
		"yotta": 1,
		"zetta": 2,
		"exa":   3,
		"peta":  4,
		"tera":  5,
		"giga":  6,
		"mega":  7,
		"kilo":  8,
		"hecto": 9,
		"deka":  10,
		"deci":  11,
		"centi": 12,
		"milli": 13,
		"micro": 14,
		"nano":  15,
		"pico":  16,
		"femto": 17,
		"atto":  18,
		"zepto": 19,
		"yocto": 20,
		"kibi":  21,
		"mebi":  22,
		"gibi":  23,
		"tebi":  24,
		"pebi":  25,
		"exbi":  26,
		"zebi":  27,
		"yobi":  28,
	}
)

func (x EnumeratedRootUnit_Prefix) Enum() *EnumeratedRootUnit_Prefix {
	p := new(EnumeratedRootUnit_Prefix)
	*p = x
	return p
}

func (x EnumeratedRootUnit_Prefix) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumeratedRootUnit_Prefix) Descriptor() protoreflect.EnumDescriptor {
	return file_units_proto_enumTypes[2].Descriptor()
}

func (EnumeratedRootUnit_Prefix) Type() protoreflect.EnumType {
	return &file_units_proto_enumTypes[2]
}

func (x EnumeratedRootUnit_Prefix) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumeratedRootUnit_Prefix.Descriptor instead.
func (EnumeratedRootUnit_Prefix) EnumDescriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{9, 1}
}

type ExternalRootUnit_Prefix int32

const (
	ExternalRootUnit_uni   ExternalRootUnit_Prefix = 0
	ExternalRootUnit_yotta ExternalRootUnit_Prefix = 1
	ExternalRootUnit_zetta ExternalRootUnit_Prefix = 2
	ExternalRootUnit_exa   ExternalRootUnit_Prefix = 3
	ExternalRootUnit_peta  ExternalRootUnit_Prefix = 4
	ExternalRootUnit_tera  ExternalRootUnit_Prefix = 5
	ExternalRootUnit_giga  ExternalRootUnit_Prefix = 6
	ExternalRootUnit_mega  ExternalRootUnit_Prefix = 7
	ExternalRootUnit_kilo  ExternalRootUnit_Prefix = 8
	ExternalRootUnit_hecto ExternalRootUnit_Prefix = 9
	ExternalRootUnit_deka  ExternalRootUnit_Prefix = 10
	ExternalRootUnit_deci  ExternalRootUnit_Prefix = 11
	ExternalRootUnit_centi ExternalRootUnit_Prefix = 12
	ExternalRootUnit_milli ExternalRootUnit_Prefix = 13
	ExternalRootUnit_micro ExternalRootUnit_Prefix = 14
	ExternalRootUnit_nano  ExternalRootUnit_Prefix = 15
	ExternalRootUnit_pico  ExternalRootUnit_Prefix = 16
	ExternalRootUnit_femto ExternalRootUnit_Prefix = 17
	ExternalRootUnit_atto  ExternalRootUnit_Prefix = 18
	ExternalRootUnit_zepto ExternalRootUnit_Prefix = 19
	ExternalRootUnit_yocto ExternalRootUnit_Prefix = 20
	ExternalRootUnit_kibi  ExternalRootUnit_Prefix = 21
	ExternalRootUnit_mebi  ExternalRootUnit_Prefix = 22
	ExternalRootUnit_gibi  ExternalRootUnit_Prefix = 23
	ExternalRootUnit_tebi  ExternalRootUnit_Prefix = 24
	ExternalRootUnit_pebi  ExternalRootUnit_Prefix = 25
	ExternalRootUnit_exbi  ExternalRootUnit_Prefix = 26
	ExternalRootUnit_zebi  ExternalRootUnit_Prefix = 27
	ExternalRootUnit_yobi  ExternalRootUnit_Prefix = 28
)

// Enum value maps for ExternalRootUnit_Prefix.
var (
	ExternalRootUnit_Prefix_name = map[int32]string{
		0:  "uni",
		1:  "yotta",
		2:  "zetta",
		3:  "exa",
		4:  "peta",
		5:  "tera",
		6:  "giga",
		7:  "mega",
		8:  "kilo",
		9:  "hecto",
		10: "deka",
		11: "deci",
		12: "centi",
		13: "milli",
		14: "micro",
		15: "nano",
		16: "pico",
		17: "femto",
		18: "atto",
		19: "zepto",
		20: "yocto",
		21: "kibi",
		22: "mebi",
		23: "gibi",
		24: "tebi",
		25: "pebi",
		26: "exbi",
		27: "zebi",
		28: "yobi",
	}
	ExternalRootUnit_Prefix_value = map[string]int32{
		"uni":   0,
		"yotta": 1,
		"zetta": 2,
		"exa":   3,
		"peta":  4,
		"tera":  5,
		"giga":  6,
		"mega":  7,
		"kilo":  8,
		"hecto": 9,
		"deka":  10,
		"deci":  11,
		"centi": 12,
		"milli": 13,
		"micro": 14,
		"nano":  15,
		"pico":  16,
		"femto": 17,
		"atto":  18,
		"zepto": 19,
		"yocto": 20,
		"kibi":  21,
		"mebi":  22,
		"gibi":  23,
		"tebi":  24,
		"pebi":  25,
		"exbi":  26,
		"zebi":  27,
		"yobi":  28,
	}
)

func (x ExternalRootUnit_Prefix) Enum() *ExternalRootUnit_Prefix {
	p := new(ExternalRootUnit_Prefix)
	*p = x
	return p
}

func (x ExternalRootUnit_Prefix) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExternalRootUnit_Prefix) Descriptor() protoreflect.EnumDescriptor {
	return file_units_proto_enumTypes[3].Descriptor()
}

func (ExternalRootUnit_Prefix) Type() protoreflect.EnumType {
	return &file_units_proto_enumTypes[3]
}

func (x ExternalRootUnit_Prefix) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExternalRootUnit_Prefix.Descriptor instead.
func (ExternalRootUnit_Prefix) EnumDescriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{10, 0}
}

type Name struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Lang string `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *Name) Reset() {
	*x = Name{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Name) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Name) ProtoMessage() {}

func (x *Name) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Name.ProtoReflect.Descriptor instead.
func (*Name) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{0}
}

func (x *Name) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Name) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type Symbol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Type   string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Lang   string `protobuf:"bytes,3,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *Symbol) Reset() {
	*x = Symbol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Symbol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Symbol) ProtoMessage() {}

func (x *Symbol) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Symbol.ProtoReflect.Descriptor instead.
func (*Symbol) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{1}
}

func (x *Symbol) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Symbol) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Symbol) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type Note struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note string `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	Lang string `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *Note) Reset() {
	*x = Note{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Note) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Note) ProtoMessage() {}

func (x *Note) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Note.ProtoReflect.Descriptor instead.
func (*Note) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{2}
}

func (x *Note) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *Note) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url  string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Lang string `protobuf:"bytes,3,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *Reference) Reset() {
	*x = Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reference) ProtoMessage() {}

func (x *Reference) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reference.ProtoReflect.Descriptor instead.
func (*Reference) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{3}
}

func (x *Reference) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Reference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Reference) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type Definition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Definition string `protobuf:"bytes,1,opt,name=definition,proto3" json:"definition,omitempty"`
	SourceUrl  string `protobuf:"bytes,2,opt,name=source_url,json=sourceUrl,proto3" json:"source_url,omitempty"`
	SourceName string `protobuf:"bytes,3,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`
	Lang       string `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *Definition) Reset() {
	*x = Definition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Definition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Definition) ProtoMessage() {}

func (x *Definition) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Definition.ProtoReflect.Descriptor instead.
func (*Definition) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{4}
}

func (x *Definition) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *Definition) GetSourceUrl() string {
	if x != nil {
		return x.SourceUrl
	}
	return ""
}

func (x *Definition) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *Definition) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type History struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	History    string `protobuf:"bytes,1,opt,name=history,proto3" json:"history,omitempty"`
	SourceUrl  string `protobuf:"bytes,2,opt,name=source_url,json=sourceUrl,proto3" json:"source_url,omitempty"`
	SourceName string `protobuf:"bytes,3,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`
	Lang       string `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *History) Reset() {
	*x = History{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *History) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*History) ProtoMessage() {}

func (x *History) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use History.ProtoReflect.Descriptor instead.
func (*History) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{5}
}

func (x *History) GetHistory() string {
	if x != nil {
		return x.History
	}
	return ""
}

func (x *History) GetSourceUrl() string {
	if x != nil {
		return x.SourceUrl
	}
	return ""
}

func (x *History) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *History) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type Remark struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Remark     string `protobuf:"bytes,1,opt,name=remark,proto3" json:"remark,omitempty"`
	SourceUrl  string `protobuf:"bytes,2,opt,name=source_url,json=sourceUrl,proto3" json:"source_url,omitempty"`
	SourceName string `protobuf:"bytes,3,opt,name=source_name,json=sourceName,proto3" json:"source_name,omitempty"`
	Lang       string `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *Remark) Reset() {
	*x = Remark{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Remark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Remark) ProtoMessage() {}

func (x *Remark) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Remark.ProtoReflect.Descriptor instead.
func (*Remark) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{6}
}

func (x *Remark) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *Remark) GetSourceUrl() string {
	if x != nil {
		return x.SourceUrl
	}
	return ""
}

func (x *Remark) GetSourceName() string {
	if x != nil {
		return x.SourceName
	}
	return ""
}

func (x *Remark) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Lang string `protobuf:"bytes,3,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *System) Reset() {
	*x = System{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System) ProtoMessage() {}

func (x *System) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System.ProtoReflect.Descriptor instead.
func (*System) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{7}
}

func (x *System) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *System) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *System) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type CodeListValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnitCodeValue    string `protobuf:"bytes,1,opt,name=unit_code_value,json=unitCodeValue,proto3" json:"unit_code_value,omitempty"`
	CodeListName     string `protobuf:"bytes,2,opt,name=code_list_name,json=codeListName,proto3" json:"code_list_name,omitempty"`
	CodeListVersion  string `protobuf:"bytes,3,opt,name=code_list_version,json=codeListVersion,proto3" json:"code_list_version,omitempty"`
	LocationUrl      string `protobuf:"bytes,4,opt,name=location_url,json=locationUrl,proto3" json:"location_url,omitempty"`
	OrganizationName string `protobuf:"bytes,5,opt,name=organization_name,json=organizationName,proto3" json:"organization_name,omitempty"`
	OrganizationUri  string `protobuf:"bytes,6,opt,name=organization_uri,json=organizationUri,proto3" json:"organization_uri,omitempty"`
	Lang             string `protobuf:"bytes,7,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *CodeListValue) Reset() {
	*x = CodeListValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CodeListValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CodeListValue) ProtoMessage() {}

func (x *CodeListValue) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CodeListValue.ProtoReflect.Descriptor instead.
func (*CodeListValue) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{8}
}

func (x *CodeListValue) GetUnitCodeValue() string {
	if x != nil {
		return x.UnitCodeValue
	}
	return ""
}

func (x *CodeListValue) GetCodeListName() string {
	if x != nil {
		return x.CodeListName
	}
	return ""
}

func (x *CodeListValue) GetCodeListVersion() string {
	if x != nil {
		return x.CodeListVersion
	}
	return ""
}

func (x *CodeListValue) GetLocationUrl() string {
	if x != nil {
		return x.LocationUrl
	}
	return ""
}

func (x *CodeListValue) GetOrganizationName() string {
	if x != nil {
		return x.OrganizationName
	}
	return ""
}

func (x *CodeListValue) GetOrganizationUri() string {
	if x != nil {
		return x.OrganizationUri
	}
	return ""
}

func (x *CodeListValue) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type EnumeratedRootUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unit             string `protobuf:"bytes,1,opt,name=unit,proto3" json:"unit,omitempty"`
	SourceUrl        string `protobuf:"bytes,2,opt,name=source_url,json=sourceUrl,proto3" json:"source_url,omitempty"`
	Prefix           string `protobuf:"bytes,3,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PowerNumerator   int32  `protobuf:"zigzag32,4,opt,name=power_numerator,json=powerNumerator,proto3" json:"power_numerator,omitempty"`
	PowerDenominator int32  `protobuf:"zigzag32,5,opt,name=power_denominator,json=powerDenominator,proto3" json:"power_denominator,omitempty"`
}

func (x *EnumeratedRootUnit) Reset() {
	*x = EnumeratedRootUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumeratedRootUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumeratedRootUnit) ProtoMessage() {}

func (x *EnumeratedRootUnit) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumeratedRootUnit.ProtoReflect.Descriptor instead.
func (*EnumeratedRootUnit) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{9}
}

func (x *EnumeratedRootUnit) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *EnumeratedRootUnit) GetSourceUrl() string {
	if x != nil {
		return x.SourceUrl
	}
	return ""
}

func (x *EnumeratedRootUnit) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *EnumeratedRootUnit) GetPowerNumerator() int32 {
	if x != nil {
		return x.PowerNumerator
	}
	return 0
}

func (x *EnumeratedRootUnit) GetPowerDenominator() int32 {
	if x != nil {
		return x.PowerDenominator
	}
	return 0
}

type ExternalRootUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unit             string `protobuf:"bytes,1,opt,name=unit,proto3" json:"unit,omitempty"`
	SourceUrl        string `protobuf:"bytes,2,opt,name=source_url,json=sourceUrl,proto3" json:"source_url,omitempty"`
	Annotation       string `protobuf:"bytes,3,opt,name=annotation,proto3" json:"annotation,omitempty"`
	Lang             string `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang,omitempty"`
	Prefix           string `protobuf:"bytes,5,opt,name=prefix,proto3" json:"prefix,omitempty"`
	PowerNumerator   int32  `protobuf:"zigzag32,6,opt,name=power_numerator,json=powerNumerator,proto3" json:"power_numerator,omitempty"`
	PowerDenominator int32  `protobuf:"zigzag32,7,opt,name=power_denominator,json=powerDenominator,proto3" json:"power_denominator,omitempty"`
}

func (x *ExternalRootUnit) Reset() {
	*x = ExternalRootUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalRootUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalRootUnit) ProtoMessage() {}

func (x *ExternalRootUnit) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalRootUnit.ProtoReflect.Descriptor instead.
func (*ExternalRootUnit) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{10}
}

func (x *ExternalRootUnit) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *ExternalRootUnit) GetSourceUrl() string {
	if x != nil {
		return x.SourceUrl
	}
	return ""
}

func (x *ExternalRootUnit) GetAnnotation() string {
	if x != nil {
		return x.Annotation
	}
	return ""
}

func (x *ExternalRootUnit) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *ExternalRootUnit) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *ExternalRootUnit) GetPowerNumerator() int32 {
	if x != nil {
		return x.PowerNumerator
	}
	return 0
}

func (x *ExternalRootUnit) GetPowerDenominator() int32 {
	if x != nil {
		return x.PowerDenominator
	}
	return 0
}

type RootUnits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnumeratedRootUnit []*EnumeratedRootUnit `protobuf:"bytes,1,rep,name=enumerated_root_unit,json=enumeratedRootUnit,proto3" json:"enumerated_root_unit,omitempty"`
	ExternalRootUnit   []*ExternalRootUnit   `protobuf:"bytes,2,rep,name=external_root_unit,json=externalRootUnit,proto3" json:"external_root_unit,omitempty"`
}

func (x *RootUnits) Reset() {
	*x = RootUnits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootUnits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootUnits) ProtoMessage() {}

func (x *RootUnits) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootUnits.ProtoReflect.Descriptor instead.
func (*RootUnits) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{11}
}

func (x *RootUnits) GetEnumeratedRootUnit() []*EnumeratedRootUnit {
	if x != nil {
		return x.EnumeratedRootUnit
	}
	return nil
}

func (x *RootUnits) GetExternalRootUnit() []*ExternalRootUnit {
	if x != nil {
		return x.ExternalRootUnit
	}
	return nil
}

type Float64ConversionFrom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InitialUnit               string  `protobuf:"bytes,2,opt,name=initial_unit,json=initialUnit,proto3" json:"initial_unit,omitempty"`
	InitialAddend             float64 `protobuf:"fixed64,3,opt,name=initial_addend,json=initialAddend,proto3" json:"initial_addend,omitempty"`
	InitialAddendDecimalPlace int32   `protobuf:"zigzag32,4,opt,name=initial_addend_decimal_place,json=initialAddendDecimalPlace,proto3" json:"initial_addend_decimal_place,omitempty"`
	Multiplicand              float64 `protobuf:"fixed64,5,opt,name=multiplicand,proto3" json:"multiplicand,omitempty"`
	MultiplicandDigits        uint32  `protobuf:"varint,6,opt,name=multiplicand_digits,json=multiplicandDigits,proto3" json:"multiplicand_digits,omitempty"`
	Divisor                   float64 `protobuf:"fixed64,7,opt,name=divisor,proto3" json:"divisor,omitempty"`
	DivisorDigits             uint32  `protobuf:"varint,8,opt,name=divisor_digits,json=divisorDigits,proto3" json:"divisor_digits,omitempty"`
	FinalAddend               float64 `protobuf:"fixed64,9,opt,name=final_addend,json=finalAddend,proto3" json:"final_addend,omitempty"`
	FinalAddendDecimalPlace   int32   `protobuf:"zigzag32,10,opt,name=final_addend_decimal_place,json=finalAddendDecimalPlace,proto3" json:"final_addend_decimal_place,omitempty"`
	Exact                     bool    `protobuf:"varint,11,opt,name=exact,proto3" json:"exact,omitempty"`
	ConversionNote            []*Note `protobuf:"bytes,12,rep,name=conversion_note,json=conversionNote,proto3" json:"conversion_note,omitempty"`
}

func (x *Float64ConversionFrom) Reset() {
	*x = Float64ConversionFrom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Float64ConversionFrom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Float64ConversionFrom) ProtoMessage() {}

func (x *Float64ConversionFrom) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Float64ConversionFrom.ProtoReflect.Descriptor instead.
func (*Float64ConversionFrom) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{12}
}

func (x *Float64ConversionFrom) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Float64ConversionFrom) GetInitialUnit() string {
	if x != nil {
		return x.InitialUnit
	}
	return ""
}

func (x *Float64ConversionFrom) GetInitialAddend() float64 {
	if x != nil {
		return x.InitialAddend
	}
	return 0
}

func (x *Float64ConversionFrom) GetInitialAddendDecimalPlace() int32 {
	if x != nil {
		return x.InitialAddendDecimalPlace
	}
	return 0
}

func (x *Float64ConversionFrom) GetMultiplicand() float64 {
	if x != nil {
		return x.Multiplicand
	}
	return 0
}

func (x *Float64ConversionFrom) GetMultiplicandDigits() uint32 {
	if x != nil {
		return x.MultiplicandDigits
	}
	return 0
}

func (x *Float64ConversionFrom) GetDivisor() float64 {
	if x != nil {
		return x.Divisor
	}
	return 0
}

func (x *Float64ConversionFrom) GetDivisorDigits() uint32 {
	if x != nil {
		return x.DivisorDigits
	}
	return 0
}

func (x *Float64ConversionFrom) GetFinalAddend() float64 {
	if x != nil {
		return x.FinalAddend
	}
	return 0
}

func (x *Float64ConversionFrom) GetFinalAddendDecimalPlace() int32 {
	if x != nil {
		return x.FinalAddendDecimalPlace
	}
	return 0
}

func (x *Float64ConversionFrom) GetExact() bool {
	if x != nil {
		return x.Exact
	}
	return false
}

func (x *Float64ConversionFrom) GetConversionNote() []*Note {
	if x != nil {
		return x.ConversionNote
	}
	return nil
}

type SpecialConversionFrom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ConversionUrl         string  `protobuf:"bytes,2,opt,name=conversion_url,json=conversionUrl,proto3" json:"conversion_url,omitempty"`
	InitialUnit           string  `protobuf:"bytes,3,opt,name=initial_unit,json=initialUnit,proto3" json:"initial_unit,omitempty"`
	ConversionDescription []*Note `protobuf:"bytes,4,rep,name=conversion_description,json=conversionDescription,proto3" json:"conversion_description,omitempty"`
}

func (x *SpecialConversionFrom) Reset() {
	*x = SpecialConversionFrom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecialConversionFrom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecialConversionFrom) ProtoMessage() {}

func (x *SpecialConversionFrom) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecialConversionFrom.ProtoReflect.Descriptor instead.
func (*SpecialConversionFrom) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{13}
}

func (x *SpecialConversionFrom) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SpecialConversionFrom) GetConversionUrl() string {
	if x != nil {
		return x.ConversionUrl
	}
	return ""
}

func (x *SpecialConversionFrom) GetInitialUnit() string {
	if x != nil {
		return x.InitialUnit
	}
	return ""
}

func (x *SpecialConversionFrom) GetConversionDescription() []*Note {
	if x != nil {
		return x.ConversionDescription
	}
	return nil
}

type WSDLConversionFrom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	InitialUnit     string  `protobuf:"bytes,2,opt,name=initial_unit,json=initialUnit,proto3" json:"initial_unit,omitempty"`
	WsdlUrl         string  `protobuf:"bytes,3,opt,name=wsdl_url,json=wsdlUrl,proto3" json:"wsdl_url,omitempty"`
	WsdlDescription []*Note `protobuf:"bytes,4,rep,name=wsdl_description,json=wsdlDescription,proto3" json:"wsdl_description,omitempty"`
}

func (x *WSDLConversionFrom) Reset() {
	*x = WSDLConversionFrom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WSDLConversionFrom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WSDLConversionFrom) ProtoMessage() {}

func (x *WSDLConversionFrom) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WSDLConversionFrom.ProtoReflect.Descriptor instead.
func (*WSDLConversionFrom) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{14}
}

func (x *WSDLConversionFrom) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WSDLConversionFrom) GetInitialUnit() string {
	if x != nil {
		return x.InitialUnit
	}
	return ""
}

func (x *WSDLConversionFrom) GetWsdlUrl() string {
	if x != nil {
		return x.WsdlUrl
	}
	return ""
}

func (x *WSDLConversionFrom) GetWsdlDescription() []*Note {
	if x != nil {
		return x.WsdlDescription
	}
	return nil
}

type Conversions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Float64ConversionFrom []*Float64ConversionFrom `protobuf:"bytes,1,rep,name=float64_conversion_from,json=float64ConversionFrom,proto3" json:"float64_conversion_from,omitempty"`
	SpecialConversionFrom []*SpecialConversionFrom `protobuf:"bytes,2,rep,name=special_conversion_from,json=specialConversionFrom,proto3" json:"special_conversion_from,omitempty"`
	WsdlConversionFrom    []*WSDLConversionFrom    `protobuf:"bytes,3,rep,name=wsdl_conversion_from,json=wsdlConversionFrom,proto3" json:"wsdl_conversion_from,omitempty"`
}

func (x *Conversions) Reset() {
	*x = Conversions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Conversions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Conversions) ProtoMessage() {}

func (x *Conversions) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Conversions.ProtoReflect.Descriptor instead.
func (*Conversions) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{15}
}

func (x *Conversions) GetFloat64ConversionFrom() []*Float64ConversionFrom {
	if x != nil {
		return x.Float64ConversionFrom
	}
	return nil
}

func (x *Conversions) GetSpecialConversionFrom() []*SpecialConversionFrom {
	if x != nil {
		return x.SpecialConversionFrom
	}
	return nil
}

func (x *Conversions) GetWsdlConversionFrom() []*WSDLConversionFrom {
	if x != nil {
		return x.WsdlConversionFrom
	}
	return nil
}

type Unit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TimeStamp          string           `protobuf:"bytes,2,opt,name=time_stamp,json=timeStamp,proto3" json:"time_stamp,omitempty"`
	DimensionUrl       string           `protobuf:"bytes,3,opt,name=dimension_url,json=dimensionUrl,proto3" json:"dimension_url,omitempty"`
	UnitSystem         []*System        `protobuf:"bytes,4,rep,name=unit_system,json=unitSystem,proto3" json:"unit_system,omitempty"`
	UnitName           []*Name          `protobuf:"bytes,5,rep,name=unit_name,json=unitName,proto3" json:"unit_name,omitempty"`
	UnitSymbol         []*Symbol        `protobuf:"bytes,6,rep,name=unit_symbol,json=unitSymbol,proto3" json:"unit_symbol,omitempty"`
	CodeListValue      []*CodeListValue `protobuf:"bytes,7,rep,name=code_list_value,json=codeListValue,proto3" json:"code_list_value,omitempty"`
	RootUnits          *RootUnits       `protobuf:"bytes,8,opt,name=root_units,json=rootUnits,proto3" json:"root_units,omitempty"`
	Conversions        *Conversions     `protobuf:"bytes,9,opt,name=conversions,proto3" json:"conversions,omitempty"`
	QuantityReference  []*Reference     `protobuf:"bytes,10,rep,name=quantity_reference,json=quantityReference,proto3" json:"quantity_reference,omitempty"`
	UnitVersionHistory []*Note          `protobuf:"bytes,11,rep,name=unit_version_history,json=unitVersionHistory,proto3" json:"unit_version_history,omitempty"`
	UnitDefinition     []*Definition    `protobuf:"bytes,12,rep,name=unit_definition,json=unitDefinition,proto3" json:"unit_definition,omitempty"`
	UnitHistory        []*History       `protobuf:"bytes,13,rep,name=unit_history,json=unitHistory,proto3" json:"unit_history,omitempty"`
	UnitRemark         []*Remark        `protobuf:"bytes,14,rep,name=unit_remark,json=unitRemark,proto3" json:"unit_remark,omitempty"`
}

func (x *Unit) Reset() {
	*x = Unit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unit) ProtoMessage() {}

func (x *Unit) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unit.ProtoReflect.Descriptor instead.
func (*Unit) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{16}
}

func (x *Unit) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Unit) GetTimeStamp() string {
	if x != nil {
		return x.TimeStamp
	}
	return ""
}

func (x *Unit) GetDimensionUrl() string {
	if x != nil {
		return x.DimensionUrl
	}
	return ""
}

func (x *Unit) GetUnitSystem() []*System {
	if x != nil {
		return x.UnitSystem
	}
	return nil
}

func (x *Unit) GetUnitName() []*Name {
	if x != nil {
		return x.UnitName
	}
	return nil
}

func (x *Unit) GetUnitSymbol() []*Symbol {
	if x != nil {
		return x.UnitSymbol
	}
	return nil
}

func (x *Unit) GetCodeListValue() []*CodeListValue {
	if x != nil {
		return x.CodeListValue
	}
	return nil
}

func (x *Unit) GetRootUnits() *RootUnits {
	if x != nil {
		return x.RootUnits
	}
	return nil
}

func (x *Unit) GetConversions() *Conversions {
	if x != nil {
		return x.Conversions
	}
	return nil
}

func (x *Unit) GetQuantityReference() []*Reference {
	if x != nil {
		return x.QuantityReference
	}
	return nil
}

func (x *Unit) GetUnitVersionHistory() []*Note {
	if x != nil {
		return x.UnitVersionHistory
	}
	return nil
}

func (x *Unit) GetUnitDefinition() []*Definition {
	if x != nil {
		return x.UnitDefinition
	}
	return nil
}

func (x *Unit) GetUnitHistory() []*History {
	if x != nil {
		return x.UnitHistory
	}
	return nil
}

func (x *Unit) GetUnitRemark() []*Remark {
	if x != nil {
		return x.UnitRemark
	}
	return nil
}

type UnitSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unit []*Unit `protobuf:"bytes,1,rep,name=unit,proto3" json:"unit,omitempty"`
}

func (x *UnitSet) Reset() {
	*x = UnitSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnitSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnitSet) ProtoMessage() {}

func (x *UnitSet) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnitSet.ProtoReflect.Descriptor instead.
func (*UnitSet) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{17}
}

func (x *UnitSet) GetUnit() []*Unit {
	if x != nil {
		return x.Unit
	}
	return nil
}

type Length struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol           string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	PowerNumerator   int32  `protobuf:"zigzag32,2,opt,name=power_numerator,json=powerNumerator,proto3" json:"power_numerator,omitempty"`
	PowerDenominator int32  `protobuf:"zigzag32,3,opt,name=power_denominator,json=powerDenominator,proto3" json:"power_denominator,omitempty"`
}

func (x *Length) Reset() {
	*x = Length{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Length) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Length) ProtoMessage() {}

func (x *Length) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Length.ProtoReflect.Descriptor instead.
func (*Length) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{18}
}

func (x *Length) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Length) GetPowerNumerator() int32 {
	if x != nil {
		return x.PowerNumerator
	}
	return 0
}

func (x *Length) GetPowerDenominator() int32 {
	if x != nil {
		return x.PowerDenominator
	}
	return 0
}

type Mass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol           string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	PowerNumerator   int32  `protobuf:"zigzag32,2,opt,name=power_numerator,json=powerNumerator,proto3" json:"power_numerator,omitempty"`
	PowerDenominator int32  `protobuf:"zigzag32,3,opt,name=power_denominator,json=powerDenominator,proto3" json:"power_denominator,omitempty"`
}

func (x *Mass) Reset() {
	*x = Mass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mass) ProtoMessage() {}

func (x *Mass) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mass.ProtoReflect.Descriptor instead.
func (*Mass) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{19}
}

func (x *Mass) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Mass) GetPowerNumerator() int32 {
	if x != nil {
		return x.PowerNumerator
	}
	return 0
}

func (x *Mass) GetPowerDenominator() int32 {
	if x != nil {
		return x.PowerDenominator
	}
	return 0
}

type Time struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol           string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	PowerNumerator   int32  `protobuf:"zigzag32,2,opt,name=power_numerator,json=powerNumerator,proto3" json:"power_numerator,omitempty"`
	PowerDenominator int32  `protobuf:"zigzag32,3,opt,name=power_denominator,json=powerDenominator,proto3" json:"power_denominator,omitempty"`
}

func (x *Time) Reset() {
	*x = Time{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Time) ProtoMessage() {}

func (x *Time) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Time.ProtoReflect.Descriptor instead.
func (*Time) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{20}
}

func (x *Time) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Time) GetPowerNumerator() int32 {
	if x != nil {
		return x.PowerNumerator
	}
	return 0
}

func (x *Time) GetPowerDenominator() int32 {
	if x != nil {
		return x.PowerDenominator
	}
	return 0
}

type ElectricCurrent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol           string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	PowerNumerator   int32  `protobuf:"zigzag32,2,opt,name=power_numerator,json=powerNumerator,proto3" json:"power_numerator,omitempty"`
	PowerDenominator int32  `protobuf:"zigzag32,3,opt,name=power_denominator,json=powerDenominator,proto3" json:"power_denominator,omitempty"`
}

func (x *ElectricCurrent) Reset() {
	*x = ElectricCurrent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectricCurrent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectricCurrent) ProtoMessage() {}

func (x *ElectricCurrent) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectricCurrent.ProtoReflect.Descriptor instead.
func (*ElectricCurrent) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{21}
}

func (x *ElectricCurrent) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *ElectricCurrent) GetPowerNumerator() int32 {
	if x != nil {
		return x.PowerNumerator
	}
	return 0
}

func (x *ElectricCurrent) GetPowerDenominator() int32 {
	if x != nil {
		return x.PowerDenominator
	}
	return 0
}

type ThermodynamicTemperature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol           string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	PowerNumerator   int32  `protobuf:"zigzag32,2,opt,name=power_numerator,json=powerNumerator,proto3" json:"power_numerator,omitempty"`
	PowerDenominator int32  `protobuf:"zigzag32,3,opt,name=power_denominator,json=powerDenominator,proto3" json:"power_denominator,omitempty"`
}

func (x *ThermodynamicTemperature) Reset() {
	*x = ThermodynamicTemperature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThermodynamicTemperature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThermodynamicTemperature) ProtoMessage() {}

func (x *ThermodynamicTemperature) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThermodynamicTemperature.ProtoReflect.Descriptor instead.
func (*ThermodynamicTemperature) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{22}
}

func (x *ThermodynamicTemperature) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *ThermodynamicTemperature) GetPowerNumerator() int32 {
	if x != nil {
		return x.PowerNumerator
	}
	return 0
}

func (x *ThermodynamicTemperature) GetPowerDenominator() int32 {
	if x != nil {
		return x.PowerDenominator
	}
	return 0
}

type AmountOfSubstance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol           string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	PowerNumerator   int32  `protobuf:"zigzag32,2,opt,name=power_numerator,json=powerNumerator,proto3" json:"power_numerator,omitempty"`
	PowerDenominator int32  `protobuf:"zigzag32,3,opt,name=power_denominator,json=powerDenominator,proto3" json:"power_denominator,omitempty"`
}

func (x *AmountOfSubstance) Reset() {
	*x = AmountOfSubstance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AmountOfSubstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AmountOfSubstance) ProtoMessage() {}

func (x *AmountOfSubstance) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AmountOfSubstance.ProtoReflect.Descriptor instead.
func (*AmountOfSubstance) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{23}
}

func (x *AmountOfSubstance) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *AmountOfSubstance) GetPowerNumerator() int32 {
	if x != nil {
		return x.PowerNumerator
	}
	return 0
}

func (x *AmountOfSubstance) GetPowerDenominator() int32 {
	if x != nil {
		return x.PowerDenominator
	}
	return 0
}

type LuminousIntensity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol           string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	PowerNumerator   int32  `protobuf:"zigzag32,2,opt,name=power_numerator,json=powerNumerator,proto3" json:"power_numerator,omitempty"`
	PowerDenominator int32  `protobuf:"zigzag32,3,opt,name=power_denominator,json=powerDenominator,proto3" json:"power_denominator,omitempty"`
}

func (x *LuminousIntensity) Reset() {
	*x = LuminousIntensity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LuminousIntensity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LuminousIntensity) ProtoMessage() {}

func (x *LuminousIntensity) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LuminousIntensity.ProtoReflect.Descriptor instead.
func (*LuminousIntensity) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{24}
}

func (x *LuminousIntensity) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *LuminousIntensity) GetPowerNumerator() int32 {
	if x != nil {
		return x.PowerNumerator
	}
	return 0
}

func (x *LuminousIntensity) GetPowerDenominator() int32 {
	if x != nil {
		return x.PowerDenominator
	}
	return 0
}

type PlaneAngle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol           string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	PowerNumerator   int32  `protobuf:"zigzag32,2,opt,name=power_numerator,json=powerNumerator,proto3" json:"power_numerator,omitempty"`
	PowerDenominator int32  `protobuf:"zigzag32,3,opt,name=power_denominator,json=powerDenominator,proto3" json:"power_denominator,omitempty"`
}

func (x *PlaneAngle) Reset() {
	*x = PlaneAngle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaneAngle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaneAngle) ProtoMessage() {}

func (x *PlaneAngle) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaneAngle.ProtoReflect.Descriptor instead.
func (*PlaneAngle) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{25}
}

func (x *PlaneAngle) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *PlaneAngle) GetPowerNumerator() int32 {
	if x != nil {
		return x.PowerNumerator
	}
	return 0
}

func (x *PlaneAngle) GetPowerDenominator() int32 {
	if x != nil {
		return x.PowerDenominator
	}
	return 0
}

type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemUrl          string `protobuf:"bytes,1,opt,name=item_url,json=itemUrl,proto3" json:"item_url,omitempty"`
	Symbol           string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	PowerNumerator   int32  `protobuf:"zigzag32,3,opt,name=power_numerator,json=powerNumerator,proto3" json:"power_numerator,omitempty"`
	PowerDenominator int32  `protobuf:"zigzag32,4,opt,name=power_denominator,json=powerDenominator,proto3" json:"power_denominator,omitempty"`
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{26}
}

func (x *Item) GetItemUrl() string {
	if x != nil {
		return x.ItemUrl
	}
	return ""
}

func (x *Item) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Item) GetPowerNumerator() int32 {
	if x != nil {
		return x.PowerNumerator
	}
	return 0
}

func (x *Item) GetPowerDenominator() int32 {
	if x != nil {
		return x.PowerDenominator
	}
	return 0
}

type Dimension struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       string                    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Dimensionless            bool                      `protobuf:"varint,2,opt,name=dimensionless,proto3" json:"dimensionless,omitempty"`
	Length                   *Length                   `protobuf:"bytes,3,opt,name=length,proto3" json:"length,omitempty"`
	Mass                     *Mass                     `protobuf:"bytes,4,opt,name=mass,proto3" json:"mass,omitempty"`
	Time                     *Time                     `protobuf:"bytes,5,opt,name=time,proto3" json:"time,omitempty"`
	ElectricCurrent          *ElectricCurrent          `protobuf:"bytes,6,opt,name=electric_current,json=electricCurrent,proto3" json:"electric_current,omitempty"`
	ThermodynamicTemperature *ThermodynamicTemperature `protobuf:"bytes,7,opt,name=thermodynamic_temperature,json=thermodynamicTemperature,proto3" json:"thermodynamic_temperature,omitempty"`
	AmountOfSubstance        *AmountOfSubstance        `protobuf:"bytes,8,opt,name=amount_of_substance,json=amountOfSubstance,proto3" json:"amount_of_substance,omitempty"`
	LuminousIntensity        *LuminousIntensity        `protobuf:"bytes,9,opt,name=luminous_intensity,json=luminousIntensity,proto3" json:"luminous_intensity,omitempty"`
	PlaneAngle               *PlaneAngle               `protobuf:"bytes,10,opt,name=plane_angle,json=planeAngle,proto3" json:"plane_angle,omitempty"`
	Item                     []*Item                   `protobuf:"bytes,11,rep,name=item,proto3" json:"item,omitempty"`
}

func (x *Dimension) Reset() {
	*x = Dimension{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dimension) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dimension) ProtoMessage() {}

func (x *Dimension) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dimension.ProtoReflect.Descriptor instead.
func (*Dimension) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{27}
}

func (x *Dimension) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Dimension) GetDimensionless() bool {
	if x != nil {
		return x.Dimensionless
	}
	return false
}

func (x *Dimension) GetLength() *Length {
	if x != nil {
		return x.Length
	}
	return nil
}

func (x *Dimension) GetMass() *Mass {
	if x != nil {
		return x.Mass
	}
	return nil
}

func (x *Dimension) GetTime() *Time {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *Dimension) GetElectricCurrent() *ElectricCurrent {
	if x != nil {
		return x.ElectricCurrent
	}
	return nil
}

func (x *Dimension) GetThermodynamicTemperature() *ThermodynamicTemperature {
	if x != nil {
		return x.ThermodynamicTemperature
	}
	return nil
}

func (x *Dimension) GetAmountOfSubstance() *AmountOfSubstance {
	if x != nil {
		return x.AmountOfSubstance
	}
	return nil
}

func (x *Dimension) GetLuminousIntensity() *LuminousIntensity {
	if x != nil {
		return x.LuminousIntensity
	}
	return nil
}

func (x *Dimension) GetPlaneAngle() *PlaneAngle {
	if x != nil {
		return x.PlaneAngle
	}
	return nil
}

func (x *Dimension) GetItem() []*Item {
	if x != nil {
		return x.Item
	}
	return nil
}

type DimensionSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dimension []*Dimension `protobuf:"bytes,1,rep,name=dimension,proto3" json:"dimension,omitempty"`
}

func (x *DimensionSet) Reset() {
	*x = DimensionSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DimensionSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DimensionSet) ProtoMessage() {}

func (x *DimensionSet) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DimensionSet.ProtoReflect.Descriptor instead.
func (*DimensionSet) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{28}
}

func (x *DimensionSet) GetDimension() []*Dimension {
	if x != nil {
		return x.Dimension
	}
	return nil
}

type CountedItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ItemName           []*Name       `protobuf:"bytes,2,rep,name=item_name,json=itemName,proto3" json:"item_name,omitempty"`
	ItemSymbol         []*Symbol     `protobuf:"bytes,3,rep,name=item_symbol,json=itemSymbol,proto3" json:"item_symbol,omitempty"`
	ItemVersionHistory []*Note       `protobuf:"bytes,4,rep,name=item_version_history,json=itemVersionHistory,proto3" json:"item_version_history,omitempty"`
	ItemDefinition     []*Definition `protobuf:"bytes,5,rep,name=item_definition,json=itemDefinition,proto3" json:"item_definition,omitempty"`
	ItemHistory        []*History    `protobuf:"bytes,6,rep,name=item_history,json=itemHistory,proto3" json:"item_history,omitempty"`
	ItemRemark         []*Remark     `protobuf:"bytes,7,rep,name=item_remark,json=itemRemark,proto3" json:"item_remark,omitempty"`
}

func (x *CountedItem) Reset() {
	*x = CountedItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountedItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountedItem) ProtoMessage() {}

func (x *CountedItem) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountedItem.ProtoReflect.Descriptor instead.
func (*CountedItem) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{29}
}

func (x *CountedItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CountedItem) GetItemName() []*Name {
	if x != nil {
		return x.ItemName
	}
	return nil
}

func (x *CountedItem) GetItemSymbol() []*Symbol {
	if x != nil {
		return x.ItemSymbol
	}
	return nil
}

func (x *CountedItem) GetItemVersionHistory() []*Note {
	if x != nil {
		return x.ItemVersionHistory
	}
	return nil
}

func (x *CountedItem) GetItemDefinition() []*Definition {
	if x != nil {
		return x.ItemDefinition
	}
	return nil
}

func (x *CountedItem) GetItemHistory() []*History {
	if x != nil {
		return x.ItemHistory
	}
	return nil
}

func (x *CountedItem) GetItemRemark() []*Remark {
	if x != nil {
		return x.ItemRemark
	}
	return nil
}

type CountedItemSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountedItem []*CountedItem `protobuf:"bytes,1,rep,name=counted_item,json=countedItem,proto3" json:"counted_item,omitempty"`
}

func (x *CountedItemSet) Reset() {
	*x = CountedItemSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountedItemSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountedItemSet) ProtoMessage() {}

func (x *CountedItemSet) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountedItemSet.ProtoReflect.Descriptor instead.
func (*CountedItemSet) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{30}
}

func (x *CountedItemSet) GetCountedItem() []*CountedItem {
	if x != nil {
		return x.CountedItem
	}
	return nil
}

type Quantity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	QuantityType           string        `protobuf:"bytes,2,opt,name=quantity_type,json=quantityType,proto3" json:"quantity_type,omitempty"`
	DimensionUrl           string        `protobuf:"bytes,3,opt,name=dimension_url,json=dimensionUrl,proto3" json:"dimension_url,omitempty"`
	QuantityName           []*Name       `protobuf:"bytes,4,rep,name=quantity_name,json=quantityName,proto3" json:"quantity_name,omitempty"`
	QuantitySymbol         []*Symbol     `protobuf:"bytes,5,rep,name=quantity_symbol,json=quantitySymbol,proto3" json:"quantity_symbol,omitempty"`
	UnitReference          []*Reference  `protobuf:"bytes,6,rep,name=unit_reference,json=unitReference,proto3" json:"unit_reference,omitempty"`
	QuantityVersionHistory []*Note       `protobuf:"bytes,7,rep,name=quantity_version_history,json=quantityVersionHistory,proto3" json:"quantity_version_history,omitempty"`
	QuantityDefinition     []*Definition `protobuf:"bytes,8,rep,name=quantity_definition,json=quantityDefinition,proto3" json:"quantity_definition,omitempty"`
	QuantityHistory        []*History    `protobuf:"bytes,9,rep,name=quantity_history,json=quantityHistory,proto3" json:"quantity_history,omitempty"`
	QuantityRemark         []*Remark     `protobuf:"bytes,10,rep,name=quantity_remark,json=quantityRemark,proto3" json:"quantity_remark,omitempty"`
}

func (x *Quantity) Reset() {
	*x = Quantity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quantity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quantity) ProtoMessage() {}

func (x *Quantity) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quantity.ProtoReflect.Descriptor instead.
func (*Quantity) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{31}
}

func (x *Quantity) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Quantity) GetQuantityType() string {
	if x != nil {
		return x.QuantityType
	}
	return ""
}

func (x *Quantity) GetDimensionUrl() string {
	if x != nil {
		return x.DimensionUrl
	}
	return ""
}

func (x *Quantity) GetQuantityName() []*Name {
	if x != nil {
		return x.QuantityName
	}
	return nil
}

func (x *Quantity) GetQuantitySymbol() []*Symbol {
	if x != nil {
		return x.QuantitySymbol
	}
	return nil
}

func (x *Quantity) GetUnitReference() []*Reference {
	if x != nil {
		return x.UnitReference
	}
	return nil
}

func (x *Quantity) GetQuantityVersionHistory() []*Note {
	if x != nil {
		return x.QuantityVersionHistory
	}
	return nil
}

func (x *Quantity) GetQuantityDefinition() []*Definition {
	if x != nil {
		return x.QuantityDefinition
	}
	return nil
}

func (x *Quantity) GetQuantityHistory() []*History {
	if x != nil {
		return x.QuantityHistory
	}
	return nil
}

func (x *Quantity) GetQuantityRemark() []*Remark {
	if x != nil {
		return x.QuantityRemark
	}
	return nil
}

type QuantitySet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Quantity []*Quantity `protobuf:"bytes,1,rep,name=quantity,proto3" json:"quantity,omitempty"`
}

func (x *QuantitySet) Reset() {
	*x = QuantitySet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuantitySet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuantitySet) ProtoMessage() {}

func (x *QuantitySet) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuantitySet.ProtoReflect.Descriptor instead.
func (*QuantitySet) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{32}
}

func (x *QuantitySet) GetQuantity() []*Quantity {
	if x != nil {
		return x.Quantity
	}
	return nil
}

type Prefix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	PrefixBase   int32     `protobuf:"zigzag32,2,opt,name=prefix_base,json=prefixBase,proto3" json:"prefix_base,omitempty"`
	PrefixPower  int32     `protobuf:"zigzag32,3,opt,name=prefix_power,json=prefixPower,proto3" json:"prefix_power,omitempty"`
	PrefixName   []*Name   `protobuf:"bytes,4,rep,name=prefix_name,json=prefixName,proto3" json:"prefix_name,omitempty"`
	PrefixSymbol []*Symbol `protobuf:"bytes,5,rep,name=prefix_symbol,json=prefixSymbol,proto3" json:"prefix_symbol,omitempty"`
}

func (x *Prefix) Reset() {
	*x = Prefix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prefix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prefix) ProtoMessage() {}

func (x *Prefix) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prefix.ProtoReflect.Descriptor instead.
func (*Prefix) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{33}
}

func (x *Prefix) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Prefix) GetPrefixBase() int32 {
	if x != nil {
		return x.PrefixBase
	}
	return 0
}

func (x *Prefix) GetPrefixPower() int32 {
	if x != nil {
		return x.PrefixPower
	}
	return 0
}

func (x *Prefix) GetPrefixName() []*Name {
	if x != nil {
		return x.PrefixName
	}
	return nil
}

func (x *Prefix) GetPrefixSymbol() []*Symbol {
	if x != nil {
		return x.PrefixSymbol
	}
	return nil
}

type PrefixSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prefix []*Prefix `protobuf:"bytes,1,rep,name=prefix,proto3" json:"prefix,omitempty"`
}

func (x *PrefixSet) Reset() {
	*x = PrefixSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_units_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrefixSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrefixSet) ProtoMessage() {}

func (x *PrefixSet) ProtoReflect() protoreflect.Message {
	mi := &file_units_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrefixSet.ProtoReflect.Descriptor instead.
func (*PrefixSet) Descriptor() ([]byte, []int) {
	return file_units_proto_rawDescGZIP(), []int{34}
}

func (x *PrefixSet) GetPrefix() []*Prefix {
	if x != nil {
		return x.Prefix
	}
	return nil
}

var File_units_proto protoreflect.FileDescriptor

var file_units_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x22, 0x2e, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x61, 0x6e, 0x67, 0x22, 0xae, 0x01, 0x0a, 0x06, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22,
	0x64, 0x0a, 0x0f, 0x50, 0x72, 0x65, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x53, 0x43, 0x49, 0x49, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x6e, 0x69, 0x63, 0x6f, 0x64, 0x65, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4c,
	0x61, 0x54, 0x65, 0x58, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x54, 0x4d, 0x4c, 0x10, 0x04,
	0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x74, 0x68, 0x4d, 0x4c, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03,
	0x53, 0x56, 0x47, 0x10, 0x06, 0x22, 0x2e, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x45, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x80, 0x01, 0x0a,
	0x0a, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22,
	0x77, 0x0a, 0x07, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x74, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61,
	0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x44,
	0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6c, 0x61, 0x6e, 0x67, 0x22, 0x98, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x75, 0x6e, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x72, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x72, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22,
	0xda, 0x26, 0x0a, 0x12, 0x45, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f,
	0x6f, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x65, 0x6e, 0x6f,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xee, 0x22, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x09, 0x0a, 0x05, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x67,
	0x72, 0x61, 0x6d, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x10,
	0x02, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x65, 0x10, 0x03, 0x12, 0x0a, 0x0a,
	0x06, 0x6b, 0x65, 0x6c, 0x76, 0x69, 0x6e, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x6d, 0x6f, 0x6c,
	0x65, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x61, 0x6e, 0x64, 0x65, 0x6c, 0x61, 0x10, 0x06,
	0x12, 0x0a, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09,
	0x73, 0x74, 0x65, 0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x68,
	0x65, 0x72, 0x74, 0x7a, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x6e, 0x65, 0x77, 0x74, 0x6f, 0x6e,
	0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x63, 0x61, 0x6c, 0x10, 0x0b, 0x12, 0x09,
	0x0a, 0x05, 0x6a, 0x6f, 0x75, 0x6c, 0x65, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x77, 0x61, 0x74,
	0x74, 0x10, 0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6c, 0x6f, 0x6d, 0x62, 0x10, 0x0e,
	0x12, 0x08, 0x0a, 0x04, 0x76, 0x6f, 0x6c, 0x74, 0x10, 0x0f, 0x12, 0x09, 0x0a, 0x05, 0x66, 0x61,
	0x72, 0x61, 0x64, 0x10, 0x10, 0x12, 0x07, 0x0a, 0x03, 0x6f, 0x68, 0x6d, 0x10, 0x11, 0x12, 0x0b,
	0x0a, 0x07, 0x73, 0x69, 0x65, 0x6d, 0x65, 0x6e, 0x73, 0x10, 0x12, 0x12, 0x09, 0x0a, 0x05, 0x77,
	0x65, 0x62, 0x65, 0x72, 0x10, 0x13, 0x12, 0x09, 0x0a, 0x05, 0x74, 0x65, 0x73, 0x6c, 0x61, 0x10,
	0x14, 0x12, 0x09, 0x0a, 0x05, 0x68, 0x65, 0x6e, 0x72, 0x79, 0x10, 0x15, 0x12, 0x12, 0x0a, 0x0e,
	0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x5f, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x10, 0x16,
	0x12, 0x09, 0x0a, 0x05, 0x6c, 0x75, 0x6d, 0x65, 0x6e, 0x10, 0x17, 0x12, 0x07, 0x0a, 0x03, 0x6c,
	0x75, 0x78, 0x10, 0x18, 0x12, 0x09, 0x0a, 0x05, 0x6b, 0x61, 0x74, 0x61, 0x6c, 0x10, 0x19, 0x12,
	0x0d, 0x0a, 0x09, 0x62, 0x65, 0x63, 0x71, 0x75, 0x65, 0x72, 0x65, 0x6c, 0x10, 0x1a, 0x12, 0x08,
	0x0a, 0x04, 0x67, 0x72, 0x61, 0x79, 0x10, 0x1b, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x69, 0x65, 0x76,
	0x65, 0x72, 0x74, 0x10, 0x1c, 0x12, 0x0a, 0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x10,
	0x1d, 0x12, 0x08, 0x0a, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x10, 0x1e, 0x12, 0x07, 0x0a, 0x03, 0x64,
	0x61, 0x79, 0x10, 0x1f, 0x12, 0x0e, 0x0a, 0x0a, 0x61, 0x72, 0x63, 0x5f, 0x64, 0x65, 0x67, 0x72,
	0x65, 0x65, 0x10, 0x20, 0x12, 0x0e, 0x0a, 0x0a, 0x61, 0x72, 0x63, 0x5f, 0x6d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x10, 0x21, 0x12, 0x0e, 0x0a, 0x0a, 0x61, 0x72, 0x63, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x10, 0x22, 0x12, 0x09, 0x0a, 0x05, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x10, 0x23, 0x12,
	0x0e, 0x0a, 0x0a, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x74, 0x6f, 0x6e, 0x10, 0x24, 0x12,
	0x10, 0x0a, 0x0c, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x6f, 0x6e, 0x76, 0x6f, 0x6c, 0x74, 0x10,
	0x25, 0x12, 0x1c, 0x0a, 0x18, 0x75, 0x6e, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x6f,
	0x6d, 0x69, 0x63, 0x5f, 0x6d, 0x61, 0x73, 0x73, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x10, 0x26, 0x12,
	0x15, 0x0a, 0x11, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x63, 0x61, 0x6c, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x10, 0x27, 0x12, 0x2a, 0x0a, 0x26, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x31, 0x73, 0x74, 0x5f, 0x68, 0x79, 0x70,
	0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x10, 0x28, 0x12, 0x2a, 0x0a, 0x26, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x32, 0x6e, 0x64, 0x5f, 0x68, 0x79, 0x70, 0x65, 0x72, 0x70, 0x6f,
	0x6c, 0x61, 0x72, 0x69, 0x7a, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x10, 0x29, 0x12, 0x19,
	0x0a, 0x15, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x2a, 0x12, 0x19, 0x0a, 0x15, 0x61, 0x74, 0x6f,
	0x6d, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x10, 0x2b, 0x12, 0x21, 0x0a, 0x1d, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x64, 0x65,
	0x6e, 0x73, 0x69, 0x74, 0x79, 0x10, 0x2c, 0x12, 0x1a, 0x0a, 0x16, 0x61, 0x74, 0x6f, 0x6d, 0x69,
	0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x10, 0x2d, 0x12, 0x29, 0x0a, 0x25, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x64,
	0x69, 0x70, 0x6f, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x2e, 0x12, 0x21,
	0x0a, 0x1d, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66,
	0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x10,
	0x2f, 0x12, 0x2a, 0x0a, 0x26, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x67, 0x72, 0x61, 0x64, 0x69, 0x65, 0x6e, 0x74, 0x10, 0x30, 0x12, 0x2a, 0x0a,
	0x26, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x10, 0x31, 0x12, 0x25, 0x0a, 0x21, 0x61, 0x74, 0x6f,
	0x6d, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x72, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x10, 0x32,
	0x12, 0x2d, 0x0a, 0x29, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f,
	0x6f, 0x66, 0x5f, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x71, 0x75, 0x61, 0x64,
	0x72, 0x75, 0x70, 0x6f, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x33, 0x12,
	0x19, 0x0a, 0x15, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f,
	0x66, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x10, 0x34, 0x12, 0x18, 0x0a, 0x14, 0x61, 0x74,
	0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x10, 0x35, 0x12, 0x19, 0x0a, 0x15, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x10, 0x36, 0x12,
	0x29, 0x0a, 0x25, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f,
	0x66, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x64, 0x69, 0x70, 0x6f, 0x6c,
	0x65, 0x5f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x37, 0x12, 0x28, 0x0a, 0x24, 0x61, 0x74,
	0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x67,
	0x6e, 0x65, 0x74, 0x69, 0x63, 0x5f, 0x66, 0x6c, 0x75, 0x78, 0x5f, 0x64, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x79, 0x10, 0x38, 0x12, 0x22, 0x0a, 0x1e, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x67, 0x6e, 0x65, 0x74, 0x69, 0x7a, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x10, 0x39, 0x12, 0x17, 0x0a, 0x13, 0x61, 0x74, 0x6f, 0x6d,
	0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x73, 0x73, 0x10,
	0x3a, 0x12, 0x1b, 0x0a, 0x17, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x75, 0x6d, 0x10, 0x3b, 0x12, 0x1f,
	0x0a, 0x1b, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66,
	0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0x3c, 0x12,
	0x17, 0x0a, 0x13, 0x61, 0x74, 0x6f, 0x6d, 0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f,
	0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x10, 0x3d, 0x12, 0x1b, 0x0a, 0x17, 0x61, 0x74, 0x6f, 0x6d,
	0x69, 0x63, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x10, 0x3e, 0x12, 0x1a, 0x0a, 0x16, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x3f, 0x12, 0x22, 0x0a, 0x1e, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x65,
	0x56, 0x5f, 0x73, 0x10, 0x40, 0x12, 0x1a, 0x0a, 0x16, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c,
	0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x10,
	0x41, 0x12, 0x21, 0x0a, 0x1d, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x69, 0x6e, 0x5f, 0x4d,
	0x65, 0x56, 0x10, 0x42, 0x12, 0x1a, 0x0a, 0x16, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x10, 0x43,
	0x12, 0x18, 0x0a, 0x14, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x73, 0x73, 0x10, 0x44, 0x12, 0x1c, 0x0a, 0x18, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f,
	0x6d, 0x65, 0x6e, 0x74, 0x75, 0x6d, 0x10, 0x45, 0x12, 0x29, 0x0a, 0x25, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x6d, 0x65,
	0x6e, 0x74, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x5f, 0x4d, 0x65, 0x56, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x63, 0x10, 0x46, 0x12, 0x18, 0x0a, 0x14, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x10, 0x47, 0x12, 0x1c, 0x0a,
	0x18, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x66,
	0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x10, 0x48, 0x12, 0x11, 0x0a, 0x0d, 0x6e,
	0x61, 0x75, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x10, 0x49, 0x12, 0x08,
	0x0a, 0x04, 0x6b, 0x6e, 0x6f, 0x74, 0x10, 0x4a, 0x12, 0x0c, 0x0a, 0x08, 0x61, 0x6e, 0x67, 0x73,
	0x74, 0x72, 0x6f, 0x6d, 0x10, 0x4b, 0x12, 0x07, 0x0a, 0x03, 0x61, 0x72, 0x65, 0x10, 0x4c, 0x12,
	0x0b, 0x0a, 0x07, 0x68, 0x65, 0x63, 0x74, 0x61, 0x72, 0x65, 0x10, 0x4d, 0x12, 0x08, 0x0a, 0x04,
	0x62, 0x61, 0x72, 0x6e, 0x10, 0x4e, 0x12, 0x07, 0x0a, 0x03, 0x62, 0x61, 0x72, 0x10, 0x4f, 0x12,
	0x07, 0x0a, 0x03, 0x67, 0x61, 0x6c, 0x10, 0x50, 0x12, 0x09, 0x0a, 0x05, 0x63, 0x75, 0x72, 0x69,
	0x65, 0x10, 0x51, 0x12, 0x0c, 0x0a, 0x08, 0x72, 0x6f, 0x65, 0x6e, 0x74, 0x67, 0x65, 0x6e, 0x10,
	0x52, 0x12, 0x07, 0x0a, 0x03, 0x72, 0x61, 0x64, 0x10, 0x53, 0x12, 0x07, 0x0a, 0x03, 0x72, 0x65,
	0x6d, 0x10, 0x54, 0x12, 0x07, 0x0a, 0x03, 0x65, 0x72, 0x67, 0x10, 0x55, 0x12, 0x08, 0x0a, 0x04,
	0x64, 0x79, 0x6e, 0x65, 0x10, 0x56, 0x12, 0x09, 0x0a, 0x05, 0x62, 0x61, 0x72, 0x79, 0x65, 0x10,
	0x57, 0x12, 0x09, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x73, 0x65, 0x10, 0x58, 0x12, 0x07, 0x0a, 0x03,
	0x72, 0x68, 0x65, 0x10, 0x59, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x74, 0x6f, 0x6b, 0x65, 0x73, 0x10,
	0x5a, 0x12, 0x09, 0x0a, 0x05, 0x64, 0x61, 0x72, 0x63, 0x79, 0x10, 0x5b, 0x12, 0x0a, 0x0a, 0x06,
	0x6b, 0x61, 0x79, 0x73, 0x65, 0x72, 0x10, 0x5c, 0x12, 0x0b, 0x0a, 0x07, 0x6c, 0x61, 0x6d, 0x62,
	0x65, 0x72, 0x74, 0x10, 0x5d, 0x12, 0x08, 0x0a, 0x04, 0x70, 0x68, 0x6f, 0x74, 0x10, 0x5e, 0x12,
	0x12, 0x0a, 0x0e, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x5f, 0x63, 0x61, 0x6c, 0x6f, 0x72, 0x69,
	0x65, 0x10, 0x5f, 0x12, 0x11, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x61, 0x6c,
	0x6f, 0x72, 0x69, 0x65, 0x10, 0x60, 0x12, 0x09, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x79, 0x65, 0x10,
	0x61, 0x12, 0x0c, 0x0a, 0x08, 0x61, 0x62, 0x61, 0x6d, 0x70, 0x65, 0x72, 0x65, 0x10, 0x62, 0x12,
	0x0d, 0x0a, 0x09, 0x61, 0x62, 0x63, 0x6f, 0x75, 0x6c, 0x6f, 0x6d, 0x62, 0x10, 0x63, 0x12, 0x0b,
	0x0a, 0x07, 0x61, 0x62, 0x66, 0x61, 0x72, 0x61, 0x64, 0x10, 0x64, 0x12, 0x0b, 0x0a, 0x07, 0x61,
	0x62, 0x68, 0x65, 0x6e, 0x72, 0x79, 0x10, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x68,
	0x6d, 0x10, 0x66, 0x12, 0x09, 0x0a, 0x05, 0x61, 0x62, 0x6d, 0x68, 0x6f, 0x10, 0x67, 0x12, 0x0a,
	0x0a, 0x06, 0x61, 0x62, 0x76, 0x6f, 0x6c, 0x74, 0x10, 0x68, 0x12, 0x0a, 0x0a, 0x06, 0x61, 0x62,
	0x77, 0x61, 0x74, 0x74, 0x10, 0x69, 0x12, 0x0b, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x77, 0x65, 0x6c,
	0x6c, 0x10, 0x6a, 0x12, 0x09, 0x0a, 0x05, 0x67, 0x61, 0x75, 0x73, 0x73, 0x10, 0x6b, 0x12, 0x0b,
	0x0a, 0x07, 0x67, 0x69, 0x6c, 0x62, 0x65, 0x72, 0x74, 0x10, 0x6c, 0x12, 0x0b, 0x0a, 0x07, 0x6f,
	0x65, 0x72, 0x73, 0x74, 0x65, 0x64, 0x10, 0x6d, 0x12, 0x09, 0x0a, 0x05, 0x73, 0x74, 0x69, 0x6c,
	0x62, 0x10, 0x6e, 0x12, 0x0e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x72,
	0x65, 0x10, 0x6f, 0x12, 0x0f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x63, 0x6f, 0x75, 0x6c, 0x6f,
	0x6d, 0x62, 0x10, 0x70, 0x12, 0x0d, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x66, 0x61, 0x72, 0x61,
	0x64, 0x10, 0x71, 0x12, 0x0d, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x68, 0x65, 0x6e, 0x72, 0x79,
	0x10, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x74, 0x6f, 0x68, 0x6d, 0x10, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x74, 0x6d, 0x68, 0x6f, 0x10, 0x74, 0x12, 0x0c, 0x0a, 0x08,
	0x73, 0x74, 0x61, 0x74, 0x76, 0x6f, 0x6c, 0x74, 0x10, 0x75, 0x12, 0x0c, 0x0a, 0x08, 0x73, 0x74,
	0x61, 0x74, 0x77, 0x61, 0x74, 0x74, 0x10, 0x76, 0x12, 0x0d, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x77, 0x65, 0x62, 0x65, 0x72, 0x10, 0x77, 0x12, 0x0d, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x74,
	0x65, 0x73, 0x6c, 0x61, 0x10, 0x78, 0x12, 0x0c, 0x0a, 0x08, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x74,
	0x6f, 0x6e, 0x10, 0x79, 0x12, 0x0d, 0x0a, 0x09, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x6f,
	0x6e, 0x10, 0x7a, 0x12, 0x17, 0x0a, 0x13, 0x67, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x68, 0x75, 0x6e,
	0x64, 0x72, 0x65, 0x64, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x10, 0x7b, 0x12, 0x11, 0x0a, 0x0d,
	0x68, 0x75, 0x6e, 0x64, 0x72, 0x65, 0x64, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x10, 0x7c, 0x12,
	0x0c, 0x0a, 0x08, 0x61, 0x76, 0x5f, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x7d, 0x12, 0x0c, 0x0a,
	0x08, 0x61, 0x76, 0x5f, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x10, 0x7e, 0x12, 0x0b, 0x0a, 0x07, 0x61,
	0x76, 0x5f, 0x64, 0x72, 0x61, 0x6d, 0x10, 0x7f, 0x12, 0x0f, 0x0a, 0x0a, 0x74, 0x72, 0x6f, 0x79,
	0x5f, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x80, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x74, 0x72, 0x6f,
	0x79, 0x5f, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x10, 0x81, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x70, 0x65,
	0x6e, 0x6e, 0x79, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x10, 0x82, 0x01, 0x12, 0x16, 0x0a, 0x11,
	0x61, 0x70, 0x6f, 0x74, 0x68, 0x65, 0x63, 0x61, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x64, 0x72, 0x61,
	0x6d, 0x10, 0x83, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x73, 0x63, 0x72, 0x75, 0x70, 0x6c, 0x65, 0x10,
	0x84, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x69, 0x6e, 0x10, 0x85, 0x01, 0x12, 0x09,
	0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x10, 0x86, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x70, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x10, 0x87, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x70,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x6c, 0x10, 0x88, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x6b, 0x69, 0x70,
	0x10, 0x89, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x74, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x10, 0x8a, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x10, 0x8b, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x69, 0x6e, 0x63, 0x68, 0x10, 0x8c, 0x01, 0x12,
	0x09, 0x0a, 0x04, 0x66, 0x6f, 0x6f, 0x74, 0x10, 0x8d, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x79, 0x61,
	0x72, 0x64, 0x10, 0x8e, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x6d, 0x69, 0x6c, 0x65, 0x10, 0x8f, 0x01,
	0x12, 0x13, 0x0a, 0x0e, 0x75, 0x73, 0x5f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x69, 0x6e,
	0x63, 0x68, 0x10, 0x90, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x75, 0x73, 0x5f, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x10, 0x91, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x75, 0x73,
	0x5f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x79, 0x61, 0x72, 0x64, 0x10, 0x92, 0x01, 0x12,
	0x15, 0x0a, 0x10, 0x75, 0x73, 0x5f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x66, 0x61, 0x74,
	0x68, 0x6f, 0x6d, 0x10, 0x93, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x75, 0x73, 0x5f, 0x73, 0x75, 0x72,
	0x76, 0x65, 0x79, 0x5f, 0x72, 0x6f, 0x64, 0x10, 0x94, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x75, 0x73,
	0x5f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x10, 0x95, 0x01,
	0x12, 0x13, 0x0a, 0x0e, 0x75, 0x73, 0x5f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x10, 0x96, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x75, 0x73, 0x5f, 0x73, 0x75, 0x72, 0x76,
	0x65, 0x79, 0x5f, 0x66, 0x75, 0x72, 0x6c, 0x6f, 0x6e, 0x67, 0x10, 0x97, 0x01, 0x12, 0x13, 0x0a,
	0x0e, 0x75, 0x73, 0x5f, 0x73, 0x75, 0x72, 0x76, 0x65, 0x79, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x10,
	0x98, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x75, 0x73, 0x5f, 0x61, 0x63, 0x72, 0x65, 0x10, 0x99, 0x01,
	0x12, 0x14, 0x0a, 0x0f, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x67, 0x61, 0x6c,
	0x6c, 0x6f, 0x6e, 0x10, 0x9a, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x71, 0x75, 0x61, 0x72, 0x74, 0x10, 0x9b, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x69,
	0x6d, 0x70, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x69, 0x6e, 0x74, 0x10, 0x9c, 0x01, 0x12,
	0x12, 0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x67, 0x69, 0x6c, 0x6c,
	0x10, 0x9d, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x10, 0x9e, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x75, 0x73, 0x5f, 0x67,
	0x61, 0x6c, 0x6c, 0x6f, 0x6e, 0x10, 0x9f, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x75, 0x73, 0x5f, 0x71,
	0x75, 0x61, 0x72, 0x74, 0x10, 0xa0, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x75, 0x73, 0x5f, 0x70, 0x69,
	0x6e, 0x74, 0x10, 0xa1, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x75, 0x73, 0x5f, 0x63, 0x75, 0x70, 0x10,
	0xa2, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x75, 0x73, 0x5f, 0x67, 0x69, 0x6c, 0x6c, 0x10, 0xa3, 0x01,
	0x12, 0x13, 0x0a, 0x0e, 0x75, 0x73, 0x5f, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x5f, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x10, 0xa4, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x75, 0x73, 0x5f, 0x66, 0x6c, 0x75, 0x69,
	0x64, 0x5f, 0x64, 0x72, 0x61, 0x6d, 0x10, 0xa5, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x75, 0x73, 0x5f,
	0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x10, 0xa6, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x75, 0x73, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x6f, 0x6f, 0x6e, 0x10, 0xa7, 0x01, 0x12, 0x10, 0x0a, 0x0b,
	0x75, 0x73, 0x5f, 0x74, 0x65, 0x61, 0x73, 0x70, 0x6f, 0x6f, 0x6e, 0x10, 0xa8, 0x01, 0x12, 0x0e,
	0x0a, 0x09, 0x75, 0x73, 0x5f, 0x62, 0x75, 0x73, 0x68, 0x65, 0x6c, 0x10, 0xa9, 0x01, 0x12, 0x0c,
	0x0a, 0x07, 0x75, 0x73, 0x5f, 0x70, 0x65, 0x63, 0x6b, 0x10, 0xaa, 0x01, 0x12, 0x11, 0x0a, 0x0c,
	0x75, 0x73, 0x5f, 0x64, 0x72, 0x79, 0x5f, 0x71, 0x75, 0x61, 0x72, 0x74, 0x10, 0xab, 0x01, 0x12,
	0x10, 0x0a, 0x0b, 0x75, 0x73, 0x5f, 0x64, 0x72, 0x79, 0x5f, 0x70, 0x69, 0x6e, 0x74, 0x10, 0xac,
	0x01, 0x12, 0x16, 0x0a, 0x11, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x5f, 0x6b, 0x67, 0x5f, 0x63,
	0x61, 0x6c, 0x6f, 0x72, 0x69, 0x65, 0x10, 0xad, 0x01, 0x12, 0x15, 0x0a, 0x10, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6b, 0x67, 0x5f, 0x63, 0x61, 0x6c, 0x6f, 0x72, 0x69, 0x65, 0x10, 0xae, 0x01,
	0x12, 0x16, 0x0a, 0x11, 0x75, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x65, 0x61,
	0x73, 0x70, 0x6f, 0x6f, 0x6e, 0x10, 0xaf, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x75, 0x73, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x6f, 0x6f, 0x6e, 0x10,
	0xb0, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x75, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x63,
	0x75, 0x70, 0x10, 0xb1, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x75, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x5f, 0x66, 0x6c, 0x75, 0x69, 0x64, 0x5f, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x10, 0xb2, 0x01,
	0x12, 0x13, 0x0a, 0x0e, 0x75, 0x73, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x5f, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x10, 0xb3, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x10, 0xb4, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x10, 0xb5, 0x01,
	0x12, 0x16, 0x0a, 0x11, 0x62, 0x6f, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x72, 0x73, 0x65,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x10, 0xb6, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x5f, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x10, 0xb7, 0x01,
	0x12, 0x15, 0x0a, 0x10, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x72, 0x73, 0x65, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x10, 0xb8, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x75, 0x6b, 0x5f, 0x68, 0x6f,
	0x72, 0x73, 0x65, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x10, 0xb9, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x64,
	0x65, 0x67, 0x72, 0x65, 0x65, 0x5f, 0x46, 0x61, 0x68, 0x72, 0x65, 0x6e, 0x68, 0x65, 0x69, 0x74,
	0x10, 0xba, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x5f, 0x52, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x65, 0x10, 0xbb, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x74, 0x6f, 0x72, 0x72,
	0x10, 0xbc, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x5f,
	0x61, 0x74, 0x6d, 0x6f, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x10, 0xbd, 0x01, 0x12, 0x19, 0x0a,
	0x14, 0x74, 0x65, 0x63, 0x68, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x74, 0x6d, 0x6f, 0x73,
	0x70, 0x68, 0x65, 0x72, 0x65, 0x10, 0xbe, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x6d, 0x6d, 0x5f, 0x48,
	0x67, 0x10, 0xbf, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x63, 0x6d, 0x5f, 0x48, 0x67, 0x10, 0xc0, 0x01,
	0x12, 0x0d, 0x0a, 0x08, 0x63, 0x6d, 0x5f, 0x48, 0x67, 0x5f, 0x30, 0x43, 0x10, 0xc1, 0x01, 0x12,
	0x0a, 0x0a, 0x05, 0x69, 0x6e, 0x5f, 0x48, 0x67, 0x10, 0xc2, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x69,
	0x6e, 0x5f, 0x48, 0x67, 0x5f, 0x33, 0x32, 0x46, 0x10, 0xc3, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x69,
	0x6e, 0x5f, 0x48, 0x67, 0x5f, 0x36, 0x30, 0x46, 0x10, 0xc4, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x66,
	0x74, 0x5f, 0x48, 0x67, 0x10, 0xc5, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x6d, 0x6d, 0x5f, 0x77, 0x61,
	0x74, 0x65, 0x72, 0x10, 0xc6, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x63, 0x6d, 0x5f, 0x77, 0x61, 0x74,
	0x65, 0x72, 0x10, 0xc7, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x63, 0x6d, 0x5f, 0x77, 0x61, 0x74, 0x65,
	0x72, 0x5f, 0x34, 0x43, 0x10, 0xc8, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x69, 0x6e, 0x5f, 0x77, 0x61,
	0x74, 0x65, 0x72, 0x10, 0xc9, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x69, 0x6e, 0x5f, 0x77, 0x61, 0x74,
	0x65, 0x72, 0x5f, 0x33, 0x39, 0x46, 0x10, 0xca, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x69, 0x6e, 0x5f,
	0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x36, 0x30, 0x46, 0x10, 0xcb, 0x01, 0x12, 0x0d, 0x0a, 0x08,
	0x66, 0x74, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x10, 0xcc, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x66,
	0x74, 0x5f, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x33, 0x39, 0x46, 0x10, 0xcd, 0x01, 0x12, 0x0f,
	0x0a, 0x0a, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x10, 0xce, 0x01, 0x12,
	0x0f, 0x0a, 0x0a, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x10, 0xcf, 0x01,
	0x12, 0x0f, 0x0a, 0x0a, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x10, 0xd0,
	0x01, 0x12, 0x11, 0x0a, 0x0c, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x10, 0xd1, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x10, 0xd2, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x73, 0x65,
	0x63, 0x10, 0xd3, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x5f, 0x70, 0x69, 0x63, 0x61, 0x10, 0xd4, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x69, 0x63, 0x61, 0x10, 0xd5, 0x01, 0x12, 0x13, 0x0a, 0x0e,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x10, 0xd6,
	0x01, 0x12, 0x13, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x10, 0xd7, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f,
	0x5f, 0x62, 0x74, 0x75, 0x10, 0xd8, 0x01, 0x12, 0x0e, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x62, 0x74, 0x75, 0x10, 0xd9, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x6d, 0x65, 0x61, 0x6e, 0x5f,
	0x62, 0x74, 0x75, 0x10, 0xda, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x62, 0x74, 0x75, 0x5f, 0x33, 0x39,
	0x46, 0x10, 0xdb, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x62, 0x74, 0x75, 0x5f, 0x35, 0x39, 0x46, 0x10,
	0xdc, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x62, 0x74, 0x75, 0x5f, 0x36, 0x30, 0x46, 0x10, 0xdd, 0x01,
	0x12, 0x10, 0x0a, 0x0b, 0x74, 0x6f, 0x6e, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x6e, 0x74, 0x10,
	0xde, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x65, 0x63, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x10, 0xdf,
	0x01, 0x12, 0x0d, 0x0a, 0x08, 0x75, 0x73, 0x5f, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x10, 0xe0, 0x01,
	0x12, 0x0d, 0x0a, 0x08, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x33, 0x36, 0x35, 0x10, 0xe1, 0x01, 0x12,
	0x12, 0x0a, 0x0d, 0x74, 0x72, 0x6f, 0x70, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x79, 0x65, 0x61, 0x72,
	0x10, 0xe2, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x5f,
	0x79, 0x65, 0x61, 0x72, 0x10, 0xe3, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x73, 0x69, 0x64, 0x65, 0x72,
	0x65, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x79, 0x10, 0xe4, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x73, 0x69,
	0x64, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x10, 0xe5, 0x01, 0x12, 0x14,
	0x0a, 0x0f, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x6d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x10, 0xe6, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x73, 0x69, 0x64, 0x65, 0x72, 0x65, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x10, 0xe7, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x73, 0x68,
	0x61, 0x6b, 0x65, 0x10, 0xe8, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x64, 0x65, 0x6e, 0x69, 0x65, 0x72,
	0x10, 0xe9, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x74, 0x65, 0x78, 0x10, 0xea, 0x01, 0x12, 0x08, 0x0a,
	0x03, 0x67, 0x6f, 0x6e, 0x10, 0xeb, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x6e, 0x61, 0x74, 0x6f, 0x5f,
	0x6d, 0x69, 0x6c, 0x10, 0xec, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x70, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x6d, 0x6f, 0x6c, 0x65, 0x10, 0xed, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x74, 0x6f, 0x6e, 0x5f, 0x72,
	0x65, 0x66, 0x72, 0x69, 0x67, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0xee, 0x01, 0x12,
	0x11, 0x0a, 0x0c, 0x63, 0x69, 0x72, 0x63, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x6d, 0x69, 0x6c, 0x10,
	0xef, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x62, 0x65, 0x6c, 0x10, 0xf0, 0x01, 0x12, 0x0a, 0x0a, 0x05,
	0x6e, 0x65, 0x70, 0x65, 0x72, 0x10, 0xf1, 0x01, 0x12, 0x07, 0x0a, 0x02, 0x70, 0x48, 0x10, 0xf2,
	0x01, 0x12, 0x11, 0x0a, 0x0c, 0x70, 0x65, 0x74, 0x72, 0x6f, 0x5f, 0x62, 0x61, 0x72, 0x72, 0x65,
	0x6c, 0x10, 0xf3, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x66, 0x6f, 0x6f, 0x74, 0x6c, 0x61, 0x6d, 0x62,
	0x65, 0x72, 0x74, 0x10, 0xf4, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x66, 0x6f, 0x6f, 0x74, 0x63, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x10, 0xf5, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x63, 0x61, 0x72, 0x61, 0x74,
	0x10, 0xf6, 0x01, 0x12, 0x08, 0x0a, 0x03, 0x62, 0x69, 0x74, 0x10, 0xf7, 0x01, 0x12, 0x09, 0x0a,
	0x04, 0x62, 0x79, 0x74, 0x65, 0x10, 0xf8, 0x01, 0x22, 0xb1, 0x02, 0x0a, 0x06, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x12, 0x07, 0x0a, 0x03, 0x75, 0x6e, 0x69, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x79, 0x6f, 0x74, 0x74, 0x61, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x7a, 0x65, 0x74, 0x74, 0x61,
	0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x65, 0x78, 0x61, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x70,
	0x65, 0x74, 0x61, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x61, 0x10, 0x05, 0x12,
	0x08, 0x0a, 0x04, 0x67, 0x69, 0x67, 0x61, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x6d, 0x65, 0x67,
	0x61, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x6b, 0x69, 0x6c, 0x6f, 0x10, 0x08, 0x12, 0x09, 0x0a,
	0x05, 0x68, 0x65, 0x63, 0x74, 0x6f, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x64, 0x65, 0x6b, 0x61,
	0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x64, 0x65, 0x63, 0x69, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05,
	0x63, 0x65, 0x6e, 0x74, 0x69, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x6d, 0x69, 0x6c, 0x6c, 0x69,
	0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x10, 0x0e, 0x12, 0x08, 0x0a,
	0x04, 0x6e, 0x61, 0x6e, 0x6f, 0x10, 0x0f, 0x12, 0x08, 0x0a, 0x04, 0x70, 0x69, 0x63, 0x6f, 0x10,
	0x10, 0x12, 0x09, 0x0a, 0x05, 0x66, 0x65, 0x6d, 0x74, 0x6f, 0x10, 0x11, 0x12, 0x08, 0x0a, 0x04,
	0x61, 0x74, 0x74, 0x6f, 0x10, 0x12, 0x12, 0x09, 0x0a, 0x05, 0x7a, 0x65, 0x70, 0x74, 0x6f, 0x10,
	0x13, 0x12, 0x09, 0x0a, 0x05, 0x79, 0x6f, 0x63, 0x74, 0x6f, 0x10, 0x14, 0x12, 0x08, 0x0a, 0x04,
	0x6b, 0x69, 0x62, 0x69, 0x10, 0x15, 0x12, 0x08, 0x0a, 0x04, 0x6d, 0x65, 0x62, 0x69, 0x10, 0x16,
	0x12, 0x08, 0x0a, 0x04, 0x67, 0x69, 0x62, 0x69, 0x10, 0x17, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x65,
	0x62, 0x69, 0x10, 0x18, 0x12, 0x08, 0x0a, 0x04, 0x70, 0x65, 0x62, 0x69, 0x10, 0x19, 0x12, 0x08,
	0x0a, 0x04, 0x65, 0x78, 0x62, 0x69, 0x10, 0x1a, 0x12, 0x08, 0x0a, 0x04, 0x7a, 0x65, 0x62, 0x69,
	0x10, 0x1b, 0x12, 0x08, 0x0a, 0x04, 0x79, 0x6f, 0x62, 0x69, 0x10, 0x1c, 0x22, 0x9b, 0x04, 0x0a,
	0x10, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x6f, 0x6f, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x55, 0x72, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x65, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xb1, 0x02, 0x0a, 0x06, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x07, 0x0a, 0x03, 0x75, 0x6e, 0x69, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x79, 0x6f,
	0x74, 0x74, 0x61, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x7a, 0x65, 0x74, 0x74, 0x61, 0x10, 0x02,
	0x12, 0x07, 0x0a, 0x03, 0x65, 0x78, 0x61, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x70, 0x65, 0x74,
	0x61, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x61, 0x10, 0x05, 0x12, 0x08, 0x0a,
	0x04, 0x67, 0x69, 0x67, 0x61, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x6d, 0x65, 0x67, 0x61, 0x10,
	0x07, 0x12, 0x08, 0x0a, 0x04, 0x6b, 0x69, 0x6c, 0x6f, 0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x68,
	0x65, 0x63, 0x74, 0x6f, 0x10, 0x09, 0x12, 0x08, 0x0a, 0x04, 0x64, 0x65, 0x6b, 0x61, 0x10, 0x0a,
	0x12, 0x08, 0x0a, 0x04, 0x64, 0x65, 0x63, 0x69, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x63, 0x65,
	0x6e, 0x74, 0x69, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x10, 0x0d,
	0x12, 0x09, 0x0a, 0x05, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x10, 0x0e, 0x12, 0x08, 0x0a, 0x04, 0x6e,
	0x61, 0x6e, 0x6f, 0x10, 0x0f, 0x12, 0x08, 0x0a, 0x04, 0x70, 0x69, 0x63, 0x6f, 0x10, 0x10, 0x12,
	0x09, 0x0a, 0x05, 0x66, 0x65, 0x6d, 0x74, 0x6f, 0x10, 0x11, 0x12, 0x08, 0x0a, 0x04, 0x61, 0x74,
	0x74, 0x6f, 0x10, 0x12, 0x12, 0x09, 0x0a, 0x05, 0x7a, 0x65, 0x70, 0x74, 0x6f, 0x10, 0x13, 0x12,
	0x09, 0x0a, 0x05, 0x79, 0x6f, 0x63, 0x74, 0x6f, 0x10, 0x14, 0x12, 0x08, 0x0a, 0x04, 0x6b, 0x69,
	0x62, 0x69, 0x10, 0x15, 0x12, 0x08, 0x0a, 0x04, 0x6d, 0x65, 0x62, 0x69, 0x10, 0x16, 0x12, 0x08,
	0x0a, 0x04, 0x67, 0x69, 0x62, 0x69, 0x10, 0x17, 0x12, 0x08, 0x0a, 0x04, 0x74, 0x65, 0x62, 0x69,
	0x10, 0x18, 0x12, 0x08, 0x0a, 0x04, 0x70, 0x65, 0x62, 0x69, 0x10, 0x19, 0x12, 0x08, 0x0a, 0x04,
	0x65, 0x78, 0x62, 0x69, 0x10, 0x1a, 0x12, 0x08, 0x0a, 0x04, 0x7a, 0x65, 0x62, 0x69, 0x10, 0x1b,
	0x12, 0x08, 0x0a, 0x04, 0x79, 0x6f, 0x62, 0x69, 0x10, 0x1c, 0x22, 0x9f, 0x01, 0x0a, 0x09, 0x52,
	0x6f, 0x6f, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x14, 0x65, 0x6e, 0x75, 0x6d,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x12, 0x65, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x6f,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x45, 0x0a, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x52, 0x6f, 0x6f, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x10, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x52, 0x6f, 0x6f, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x22, 0xf4, 0x03, 0x0a,
	0x15, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x69,
	0x74, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x65, 0x6e, 0x64,
	0x12, 0x3f, 0x0a, 0x1c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x65,
	0x6e, 0x64, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x19, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x41,
	0x64, 0x64, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x67, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x64,
	0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x64, 0x69, 0x76, 0x69, 0x73, 0x6f, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x76, 0x69, 0x73, 0x6f, 0x72, 0x5f, 0x64, 0x69, 0x67, 0x69,
	0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x69, 0x76, 0x69, 0x73, 0x6f,
	0x72, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x5f, 0x61, 0x64, 0x64, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x66,
	0x69, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x65, 0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x66, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x17,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x12, 0x34, 0x0a,
	0x0f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x4e,
	0x6f, 0x74, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4e,
	0x6f, 0x74, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x15, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x61, 0x6c, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x42, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x15, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9a, 0x01, 0x0a, 0x12,
	0x57, 0x53, 0x44, 0x4c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x72,
	0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x75, 0x6e,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x73, 0x64, 0x6c, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x73, 0x64, 0x6c, 0x55, 0x72, 0x6c,
	0x12, 0x36, 0x0a, 0x10, 0x77, 0x73, 0x64, 0x6c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x0f, 0x77, 0x73, 0x64, 0x6c, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x02, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x54, 0x0a, 0x17, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x36, 0x34, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x15, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x54,
	0x0a, 0x17, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x15, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x46, 0x72, 0x6f, 0x6d, 0x12, 0x4b, 0x0a, 0x14, 0x77, 0x73, 0x64, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x57, 0x53, 0x44, 0x4c, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x12, 0x77,
	0x73, 0x64, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f,
	0x6d, 0x22, 0xa8, 0x05, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x6d,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x2e,
	0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x28,
	0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08,
	0x75, 0x6e, 0x69, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x0b, 0x75, 0x6e, 0x69, 0x74,
	0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x0a, 0x75, 0x6e,
	0x69, 0x74, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x3c, 0x0a, 0x0f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2f, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x6e, 0x69,
	0x74, 0x73, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x52, 0x09, 0x72, 0x6f,
	0x6f, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f, 0x0a,
	0x12, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x11, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3d,
	0x0a, 0x14, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x12, 0x75, 0x6e, 0x69, 0x74, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3a, 0x0a,
	0x0f, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x75, 0x6e, 0x69, 0x74, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0c, 0x75, 0x6e, 0x69,
	0x74, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x0b, 0x75, 0x6e, 0x69, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x0b,
	0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x52, 0x0a, 0x75, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x2a, 0x0a, 0x07,
	0x55, 0x6e, 0x69, 0x74, 0x53, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x22, 0x76, 0x0a, 0x06, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x10,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x22, 0x74, 0x0a, 0x04, 0x4d, 0x61, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x65, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x74, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x2b, 0x0a, 0x11, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x10, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x7f, 0x0a, 0x0f,
	0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x10, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x88, 0x01,
	0x0a, 0x18, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0e, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x65, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x81, 0x01, 0x0a, 0x11, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x2b, 0x0a, 0x11, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x10, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x81, 0x01, 0x0a,
	0x11, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x6f, 0x75, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x10,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x22, 0x7a, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x2b, 0x0a, 0x11, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x10, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0x8f, 0x01, 0x0a,
	0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x55, 0x72, 0x6c,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x2b, 0x0a, 0x11, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x10, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x22, 0xb3,
	0x04, 0x0a, 0x09, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x6c, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x6c, 0x65,
	0x73, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x04, 0x6d, 0x61, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e,
	0x4d, 0x61, 0x73, 0x73, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x10, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x45, 0x6c,
	0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x5c,
	0x0a, 0x19, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x54, 0x68, 0x65, 0x72, 0x6d, 0x6f,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x18, 0x74, 0x68, 0x65, 0x72, 0x6d, 0x6f, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x48, 0x0a, 0x13,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x66, 0x53, 0x75, 0x62, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x11, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x66, 0x53, 0x75, 0x62,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x12, 0x6c, 0x75, 0x6d, 0x69, 0x6e, 0x6f,
	0x75, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x4c, 0x75, 0x6d, 0x69, 0x6e,
	0x6f, 0x75, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x52, 0x11, 0x6c, 0x75,
	0x6d, 0x69, 0x6e, 0x6f, 0x75, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x79, 0x12,
	0x32, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x50, 0x6c, 0x61,
	0x6e, 0x65, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x41, 0x6e,
	0x67, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x22, 0x3e, 0x0a, 0x0c, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e,
	0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0xd5, 0x02, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e,
	0x0a, 0x0b, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x3d,
	0x0a, 0x14, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x68,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75,
	0x6e, 0x69, 0x74, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x12, 0x69, 0x74, 0x65, 0x6d, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3a, 0x0a,
	0x0f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x69, 0x74, 0x65, 0x6d, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0c, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x0b, 0x69, 0x74, 0x65, 0x6d, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2e, 0x0a, 0x0b,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b,
	0x52, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x47, 0x0a, 0x0e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x65, 0x74, 0x12, 0x35,
	0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x64, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x85, 0x04, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x6d, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x30, 0x0a, 0x0d,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x0c, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36,
	0x0a, 0x0f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x0e, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x37, 0x0a, 0x0e, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x0d, 0x75, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x45, 0x0a, 0x18, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x16,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x42, 0x0a, 0x13, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x10, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x0f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x0f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x0e, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x3a, 0x0a,
	0x0b, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x08,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xbe, 0x01, 0x0a, 0x06, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x42, 0x61, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x70, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x0b, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x52, 0x0c, 0x70, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x22, 0x32, 0x0a, 0x09, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x53, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x2e,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x42, 0x19,
	0x5a, 0x17, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x35, 0x65,
	0x2d, 0x69, 0x6f, 0x2f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_units_proto_rawDescOnce sync.Once
	file_units_proto_rawDescData = file_units_proto_rawDesc
)

func file_units_proto_rawDescGZIP() []byte {
	file_units_proto_rawDescOnce.Do(func() {
		file_units_proto_rawDescData = protoimpl.X.CompressGZIP(file_units_proto_rawDescData)
	})
	return file_units_proto_rawDescData
}

var file_units_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_units_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_units_proto_goTypes = []interface{}{
	(Symbol_PredefinedTypes)(0),      // 0: units.Symbol.PredefinedTypes
	(EnumeratedRootUnit_Unit)(0),     // 1: units.EnumeratedRootUnit.Unit
	(EnumeratedRootUnit_Prefix)(0),   // 2: units.EnumeratedRootUnit.Prefix
	(ExternalRootUnit_Prefix)(0),     // 3: units.ExternalRootUnit.Prefix
	(*Name)(nil),                     // 4: units.Name
	(*Symbol)(nil),                   // 5: units.Symbol
	(*Note)(nil),                     // 6: units.Note
	(*Reference)(nil),                // 7: units.Reference
	(*Definition)(nil),               // 8: units.Definition
	(*History)(nil),                  // 9: units.History
	(*Remark)(nil),                   // 10: units.Remark
	(*System)(nil),                   // 11: units.System
	(*CodeListValue)(nil),            // 12: units.CodeListValue
	(*EnumeratedRootUnit)(nil),       // 13: units.EnumeratedRootUnit
	(*ExternalRootUnit)(nil),         // 14: units.ExternalRootUnit
	(*RootUnits)(nil),                // 15: units.RootUnits
	(*Float64ConversionFrom)(nil),    // 16: units.Float64ConversionFrom
	(*SpecialConversionFrom)(nil),    // 17: units.SpecialConversionFrom
	(*WSDLConversionFrom)(nil),       // 18: units.WSDLConversionFrom
	(*Conversions)(nil),              // 19: units.Conversions
	(*Unit)(nil),                     // 20: units.Unit
	(*UnitSet)(nil),                  // 21: units.UnitSet
	(*Length)(nil),                   // 22: units.Length
	(*Mass)(nil),                     // 23: units.Mass
	(*Time)(nil),                     // 24: units.Time
	(*ElectricCurrent)(nil),          // 25: units.ElectricCurrent
	(*ThermodynamicTemperature)(nil), // 26: units.ThermodynamicTemperature
	(*AmountOfSubstance)(nil),        // 27: units.AmountOfSubstance
	(*LuminousIntensity)(nil),        // 28: units.LuminousIntensity
	(*PlaneAngle)(nil),               // 29: units.PlaneAngle
	(*Item)(nil),                     // 30: units.Item
	(*Dimension)(nil),                // 31: units.Dimension
	(*DimensionSet)(nil),             // 32: units.DimensionSet
	(*CountedItem)(nil),              // 33: units.CountedItem
	(*CountedItemSet)(nil),           // 34: units.CountedItemSet
	(*Quantity)(nil),                 // 35: units.Quantity
	(*QuantitySet)(nil),              // 36: units.QuantitySet
	(*Prefix)(nil),                   // 37: units.Prefix
	(*PrefixSet)(nil),                // 38: units.PrefixSet
}
var file_units_proto_depIdxs = []int32{
	13, // 0: units.RootUnits.enumerated_root_unit:type_name -> units.EnumeratedRootUnit
	14, // 1: units.RootUnits.external_root_unit:type_name -> units.ExternalRootUnit
	6,  // 2: units.Float64ConversionFrom.conversion_note:type_name -> units.Note
	6,  // 3: units.SpecialConversionFrom.conversion_description:type_name -> units.Note
	6,  // 4: units.WSDLConversionFrom.wsdl_description:type_name -> units.Note
	16, // 5: units.Conversions.float64_conversion_from:type_name -> units.Float64ConversionFrom
	17, // 6: units.Conversions.special_conversion_from:type_name -> units.SpecialConversionFrom
	18, // 7: units.Conversions.wsdl_conversion_from:type_name -> units.WSDLConversionFrom
	11, // 8: units.Unit.unit_system:type_name -> units.System
	4,  // 9: units.Unit.unit_name:type_name -> units.Name
	5,  // 10: units.Unit.unit_symbol:type_name -> units.Symbol
	12, // 11: units.Unit.code_list_value:type_name -> units.CodeListValue
	15, // 12: units.Unit.root_units:type_name -> units.RootUnits
	19, // 13: units.Unit.conversions:type_name -> units.Conversions
	7,  // 14: units.Unit.quantity_reference:type_name -> units.Reference
	6,  // 15: units.Unit.unit_version_history:type_name -> units.Note
	8,  // 16: units.Unit.unit_definition:type_name -> units.Definition
	9,  // 17: units.Unit.unit_history:type_name -> units.History
	10, // 18: units.Unit.unit_remark:type_name -> units.Remark
	20, // 19: units.UnitSet.unit:type_name -> units.Unit
	22, // 20: units.Dimension.length:type_name -> units.Length
	23, // 21: units.Dimension.mass:type_name -> units.Mass
	24, // 22: units.Dimension.time:type_name -> units.Time
	25, // 23: units.Dimension.electric_current:type_name -> units.ElectricCurrent
	26, // 24: units.Dimension.thermodynamic_temperature:type_name -> units.ThermodynamicTemperature
	27, // 25: units.Dimension.amount_of_substance:type_name -> units.AmountOfSubstance
	28, // 26: units.Dimension.luminous_intensity:type_name -> units.LuminousIntensity
	29, // 27: units.Dimension.plane_angle:type_name -> units.PlaneAngle
	30, // 28: units.Dimension.item:type_name -> units.Item
	31, // 29: units.DimensionSet.dimension:type_name -> units.Dimension
	4,  // 30: units.CountedItem.item_name:type_name -> units.Name
	5,  // 31: units.CountedItem.item_symbol:type_name -> units.Symbol
	6,  // 32: units.CountedItem.item_version_history:type_name -> units.Note
	8,  // 33: units.CountedItem.item_definition:type_name -> units.Definition
	9,  // 34: units.CountedItem.item_history:type_name -> units.History
	10, // 35: units.CountedItem.item_remark:type_name -> units.Remark
	33, // 36: units.CountedItemSet.counted_item:type_name -> units.CountedItem
	4,  // 37: units.Quantity.quantity_name:type_name -> units.Name
	5,  // 38: units.Quantity.quantity_symbol:type_name -> units.Symbol
	7,  // 39: units.Quantity.unit_reference:type_name -> units.Reference
	6,  // 40: units.Quantity.quantity_version_history:type_name -> units.Note
	8,  // 41: units.Quantity.quantity_definition:type_name -> units.Definition
	9,  // 42: units.Quantity.quantity_history:type_name -> units.History
	10, // 43: units.Quantity.quantity_remark:type_name -> units.Remark
	35, // 44: units.QuantitySet.quantity:type_name -> units.Quantity
	4,  // 45: units.Prefix.prefix_name:type_name -> units.Name
	5,  // 46: units.Prefix.prefix_symbol:type_name -> units.Symbol
	37, // 47: units.PrefixSet.prefix:type_name -> units.Prefix
	48, // [48:48] is the sub-list for method output_type
	48, // [48:48] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_units_proto_init() }
func file_units_proto_init() {
	if File_units_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_units_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Name); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Symbol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Note); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Definition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*History); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Remark); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CodeListValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumeratedRootUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalRootUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootUnits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Float64ConversionFrom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecialConversionFrom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WSDLConversionFrom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Conversions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnitSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Length); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Time); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectricCurrent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThermodynamicTemperature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AmountOfSubstance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LuminousIntensity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaneAngle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dimension); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DimensionSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountedItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountedItemSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quantity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuantitySet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prefix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_units_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrefixSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_units_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_units_proto_goTypes,
		DependencyIndexes: file_units_proto_depIdxs,
		EnumInfos:         file_units_proto_enumTypes,
		MessageInfos:      file_units_proto_msgTypes,
	}.Build()
	File_units_proto = out.File
	file_units_proto_rawDesc = nil
	file_units_proto_goTypes = nil
	file_units_proto_depIdxs = nil
}
